var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,3.075,1,2.615]],["body/guards/AccessTokenGuard.html",[1,3.33,2,2.774,3,0.13,4,0.115,5,0.101,6,5.478,7,4.52,8,3.083,9,0.29,10,1.246,11,1.618,12,5.777,13,2.755,14,5.012,15,1.831,16,3.083,17,5.996,18,4.538,19,4.929,20,0.756,21,3.551,22,1.444,23,0.015,24,1.24,25,0.532,26,1.019,27,3.083,28,4.52,29,3.551,30,3.33,31,1.2,32,2.375,33,5.012,34,4.589,35,3.551,36,1.294,37,3.114,38,0.34,39,1.96,40,0.845,41,3.609,42,0.574,43,1.766,44,2.359,45,2.543,46,2.359,47,3.083,48,2.774,49,3.083,50,0.13,51,0.042,52,2.206,53,1.506,54,2.774,55,2.215,56,3.551,57,4.538,58,3.551,59,3.551,60,2.267,61,1.759,62,1.858,63,4.351,64,1.247,65,3.551,66,3.551,67,3.083,68,3.551,69,1.294,70,1.683,71,3.551,72,3.551,73,0.009,74,0.009]],["title/controllers/AppController.html",[75,1.438,76,2.819]],["body/controllers/AppController.html",[3,0.209,4,0.185,5,0.162,23,0.015,38,0.337,42,0.923,50,0.209,51,0.067,53,1.715,73,0.012,74,0.012,75,2.498,76,4.896,77,2.173,78,4.956,79,4.546,80,4.956,81,2.705]],["title/modules/AppModule.html",[82,1.328,83,2.819]],["body/modules/AppModule.html",[1,2.943,3,0.109,4,0.097,5,0.085,7,2.143,23,0.015,38,0.387,42,0.484,43,1.488,44,1.988,46,1.988,50,0.109,51,0.035,55,1.051,70,2.099,73,0.008,74,0.008,76,3.776,77,1.686,79,4.046,80,2.598,82,1.779,83,5.628,84,1.354,85,1.294,86,1.488,87,1.488,88,1.354,89,2.622,90,1.488,91,2.598,92,2.598,93,2.598,94,4.046,95,4.327,96,4.046,97,4.046,98,4.327,99,4.046,100,4.327,101,3.805,102,2.203,103,1.488,104,1.488,105,2.338,106,2.445,107,2.993,108,2.993,109,2.993,110,2.993,111,1.859,112,1.294,113,2.598,114,2.993,115,1.988,116,2.598,117,2.993,118,3.503,119,2.993,120,4.429,121,2.993,122,4.429,123,2.993,124,2.993,125,2.598,126,4.429,127,4.429,128,2.143,129,2.993,130,2.598,131,3.172,132,2.993,133,3.172,134,2.993,135,2.338,136,2.993,137,2.993,138,2.993,139,3.503,140,2.598,141,2.993,142,2.993,143,2.993,144,2.993,145,2.993,146,2.993,147,2.993,148,2.598,149,2.598,150,2.993,151,2.598,152,3.845,153,3.845]],["title/injectables/AppService.html",[40,0.663,79,2.445]],["body/injectables/AppService.html",[3,0.202,4,0.18,5,0.157,9,0.452,10,1.668,20,0.721,23,0.014,31,1.325,36,1.733,38,0.273,40,1.131,42,0.895,50,0.202,51,0.065,69,1.43,73,0.012,74,0.012,79,4.169,154,1.943,155,4.806,156,7.507,157,5.537,158,5.537,159,5.537]],["title/controllers/AuthController.html",[75,1.438,160,2.819]],["body/controllers/AuthController.html",[3,0.15,4,0.133,5,0.117,9,0.335,10,1.378,11,2.012,20,0.722,22,1.378,23,0.015,24,1.184,25,0.508,26,0.973,31,1.327,38,0.356,42,0.664,50,0.15,51,0.048,53,1.234,69,1.431,73,0.01,74,0.01,75,1.501,77,1.564,81,1.947,160,3.97,161,3.566,162,2.4,163,2.757,164,2.171,165,4.33,166,4.812,167,3.566,168,4.488,169,1.603,170,5.543,171,4.109,172,4.109,173,2.11,174,3.566,175,4.8,176,5.543,177,4.109,178,4.109,179,2.4,180,4.109,181,3.566,182,1.386,183,3.665,184,3.566,185,3.566,186,3.566,187,2.552,188,3.566,189,3.209,190,4.109,191,5.543,192,4.33,193,4.109,194,4.109,195,3.566,196,4.109,197,4.109]],["title/modules/AuthModule.html",[82,1.328,94,2.445]],["body/modules/AuthModule.html",[3,0.14,4,0.124,5,0.109,23,0.015,38,0.381,42,0.618,43,1.9,44,2.538,46,2.538,50,0.14,51,0.045,73,0.009,74,0.009,77,2.007,82,2.038,84,1.728,85,1.652,86,1.9,87,1.9,88,1.728,89,3.004,90,3.004,94,4.799,101,3.081,102,2.623,103,1.9,104,1.9,106,2.108,113,3.315,125,3.315,148,3.315,149,3.315,152,3.315,153,3.315,160,4.326,183,4.513,184,3.315,198,3.315,199,3.315,200,3.315,201,4.074,202,4.391,203,4.129,204,3.819,205,4.326,206,3.276,207,3.819,208,3.315,209,3.819,210,3.777,211,3.819,212,3.315,213,3.819,214,3.819,215,3.819,216,3.819,217,3.315]],["title/injectables/AuthService.html",[40,0.663,183,2.3]],["body/injectables/AuthService.html",[3,0.133,4,0.118,5,0.103,9,0.296,10,1.266,11,1.937,13,2.434,15,1.86,20,0.765,22,1.462,23,0.015,24,1.255,25,0.539,26,1.032,31,1.219,38,0.352,39,2.004,40,0.858,41,2.255,42,0.587,50,0.133,51,0.042,53,1.766,55,1.787,60,1.642,61,1.274,64,1.787,69,1.314,73,0.009,74,0.009,154,1.274,164,2.09,165,3.976,166,4.419,168,3.959,173,1.937,174,4.419,175,4.458,183,2.974,185,3.151,189,2.836,201,3.942,203,4.173,206,2.255,218,3.151,219,3.151,220,3.553,221,3.63,222,5.091,223,3.63,224,3.63,225,3.63,226,2.6,227,3.151,228,2.81,229,2.412,230,3.63,231,2.836,232,1.178,233,3.63,234,5.091,235,3.63,236,3.63,237,1.503,238,3.63,239,3.63,240,3.63,241,2.121,242,3.151,243,3.63]],["title/guards/AuthenticationGuard.html",[0,3.075,131,2.819]],["body/guards/AuthenticationGuard.html",[1,4.746,2,4.592,3,0.133,4,0.118,5,0.103,7,2.6,9,0.296,10,1.266,11,1.637,12,6.201,13,2.88,15,1.86,20,0.663,22,1.266,23,0.015,24,1.087,25,0.466,26,0.893,27,4.419,28,4.564,30,2.412,31,0.869,32,2.412,38,0.343,40,0.858,41,3.162,42,0.587,49,3.151,50,0.133,51,0.042,52,2.255,53,2.09,55,2.237,60,1.642,61,1.274,64,1.274,69,0.937,70,2.412,73,0.009,74,0.009,128,2.6,130,3.151,131,3.646,187,2.255,244,3.151,245,0.903,246,5.091,247,4.419,248,5.091,249,3.63,250,6.956,251,3.63,252,3.63,253,3.151,254,2.836,255,3.151,256,3.151,257,2.836,258,5.091,259,3.63,260,3.63,261,3.63,262,3.151,263,3.63,264,3.63,265,3.63,266,3.63,267,3.63,268,3.63,269,3.63,270,3.63,271,3.63,272,3.63,273,3.63,274,1.899]],["title/injectables/BcryptProvider.html",[40,0.663,210,2.819]],["body/injectables/BcryptProvider.html",[3,0.156,4,0.138,5,0.121,9,0.348,10,1.413,11,2.034,20,0.74,22,1.413,23,0.015,24,1.214,25,0.521,26,0.997,31,1.36,32,3.23,36,1.98,38,0.315,40,0.958,42,0.69,50,0.156,51,0.05,52,2.649,55,1.497,64,1.497,69,1.467,73,0.01,74,0.01,154,1.497,164,2.194,201,3.136,210,4.07,227,3.701,275,3.701,276,4.933,277,4.933,278,4.933,279,6.339,280,5.917,281,4.264,282,3.136,283,4.933,284,4.264,285,4.933,286,5.683,287,4.264,288,4.264,289,4.264]],["title/classes/CreateManyUsersDto.html",[51,0.046,290,2.445]],["body/classes/CreateManyUsersDto.html",[3,0.175,4,0.156,5,0.136,9,0.391,20,0.624,23,0.015,25,0.675,38,0.351,50,0.175,51,0.079,70,3.206,73,0.011,74,0.011,169,1.387,232,1.556,245,1.525,290,3.811,291,1.752,292,4.161,293,4.845,294,3.936,295,4.794,296,5.325,297,4.792,298,5.325,299,4.794,300,4.161,301,4.794,302,5.325,303,3.21,304,5.325,305,1.985,306,4.161,307,2.978,308,4.792,309,2.168,310,4.161]],["title/classes/CreatePostDto.html",[51,0.046,311,2.445]],["body/classes/CreatePostDto.html",[3,0.079,4,0.07,5,0.061,9,0.176,20,0.856,23,0.015,25,0.665,26,1.2,30,2.289,36,1.793,38,0.281,50,0.079,51,0.05,70,2.325,73,0.006,74,0.006,169,1.903,182,2.308,237,2.875,245,1.069,291,0.789,296,2.991,297,2.691,298,2.991,300,1.874,302,2.991,303,2.804,304,2.991,305,0.894,307,1.341,308,4.187,309,0.977,310,2.991,311,2.14,312,1.874,313,3.796,314,3.079,315,3.731,316,4.459,317,3.358,318,2.67,319,3.561,320,2.856,321,3.33,322,4.683,323,4.653,324,4.863,325,2.159,326,2.159,327,3.445,328,2.289,329,4.136,330,2.159,331,2.159,332,2.708,333,2.991,334,2.159,335,1.901,336,2.159,337,2.159,338,3.445,339,4.258,340,4.906,341,2.14,342,2.691,343,2.159,344,2.159,345,2.866,346,3.358,347,3.445,348,3.445,349,2.159,350,2.159,351,3.445,352,3.514,353,3.358,354,2.991,355,2.691,356,3.445,357,2.159,358,2.159,359,2.159,360,2.159,361,1.874,362,3.358,363,2.159,364,4.258,365,3.832,366,2.289,367,2.991,368,2.991,369,2.691,370,2.991,371,2.991,372,1.874,373,2.159,374,4.187,375,2.691,376,2.691,377,2.691,378,2.159,379,2.159,380,1.162,381,2.991,382,2.159,383,2.159,384,2.159,385,2.159,386,2.159,387,4.683,388,3.445,389,2.159,390,2.991,391,2.467,392,3.503,393,2.708,394,2.991,395,1.687,396,1.435,397,1.687,398,1.874,399,1.874,400,1.023,401,1.874,402,2.159,403,2.159,404,2.691,405,1.687,406,2.159,407,1.874,408,1.874,409,2.159,410,2.159,411,2.159,412,2.159,413,2.159,414,1.874,415,2.159,416,2.159,417,2.467,418,2.159]],["title/classes/CreatePostMetaOptionsDto.html",[51,0.046,332,2.173]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.199,4,0.177,5,0.155,9,0.445,20,0.71,23,0.014,25,0.5,36,1.717,38,0.269,50,0.199,51,0.078,73,0.012,74,0.012,169,1.577,245,1.653,291,1.993,303,3.479,305,2.258,332,3.67,391,4.763,393,3.01,396,3.624,400,3.151,417,5.138,419,4.734,420,5.454,421,5.454]],["title/classes/CreateTagDto.html",[51,0.046,422,2.615]],["body/classes/CreateTagDto.html",[3,0.139,4,0.123,5,0.108,9,0.309,20,0.887,23,0.015,24,1.285,25,0.625,26,1.237,36,1.955,38,0.258,50,0.139,51,0.061,73,0.009,74,0.009,169,1.971,237,2.688,245,1.304,291,1.385,303,3.147,305,1.569,308,4.699,309,1.714,314,4.308,318,3.737,319,4.529,324,4.313,361,3.29,362,4.097,364,5.636,365,5.071,366,3.485,367,4.553,368,4.553,369,4.097,370,4.553,371,4.553,372,3.29,387,5.071,391,3.757,392,3.793,393,3.583,394,4.553,395,2.96,396,2.518,397,2.96,407,3.29,408,4.553,414,3.29,422,3.485,423,3.29,424,3.79,425,3.79,426,3.79,427,3.79,428,3.79,429,3.79,430,3.79,431,3.79,432,3.79,433,3.79,434,3.29]],["title/classes/CreateUserDto.html",[51,0.046,294,2.173]],["body/classes/CreateUserDto.html",[3,0.151,4,0.134,5,0.118,9,0.338,20,0.877,23,0.014,25,0.617,26,0.978,36,1.943,38,0.204,50,0.151,51,0.065,73,0.01,74,0.01,169,1.949,241,3.681,245,1.386,291,1.514,294,3.077,303,3.526,305,1.715,366,3.704,380,1.881,392,3.257,393,3.719,395,3.237,396,2.753,397,3.237,434,4.839,435,3.597,436,2.85,437,3.914,438,3.914,439,4.143,440,4.143,441,4.143,442,4.143,443,4.143,444,4.143,445,4.143,446,6.739,447,5.575,448,5.575,449,5.575,450,5.575,451,5.575,452,6.287,453,5.575,454,4.839,455,4.143,456,4.143,457,4.839,458,6.739,459,4.143,460,4.143,461,3.597]],["title/injectables/CreateUserProvider.html",[40,0.663,462,2.445]],["body/injectables/CreateUserProvider.html",[3,0.116,4,0.103,5,0.09,9,0.258,10,1.146,11,1.849,13,2.253,15,1.684,20,0.708,22,1.353,23,0.015,24,1.162,25,0.499,26,0.955,31,1.104,37,1.963,38,0.353,39,1.744,40,0.777,42,0.511,50,0.116,51,0.037,53,1.635,55,1.109,60,2.462,61,2.1,62,2.412,64,2.233,69,1.19,73,0.008,74,0.008,112,1.367,154,1.109,164,1.995,173,1.755,201,3.879,206,1.963,228,3.004,229,2.1,231,2.469,232,2.155,237,1.308,241,1.847,274,2.412,294,3.665,436,1.43,462,2.864,463,5.193,464,2.743,465,2.707,466,4.002,467,2.743,468,3.302,469,4.259,470,3.161,471,4.002,472,4.002,473,3.161,474,4.002,475,3.974,476,3.161,477,2.743,478,2.264,479,2.469,480,2.264,481,2.469,482,1.963,483,2.264,484,1.203,485,3.161,486,2.743,487,3.161,488,2.743,489,3.161,490,3.161,491,3.161,492,3.161,493,2.743,494,4.251,495,3.161,496,3.161,497,3.161,498,3.161,499,2.544,500,2.743,501,3.161,502,3.161,503,2.743]],["title/injectables/DataResponseInterceptor.html",[40,0.663,133,2.819]],["body/injectables/DataResponseInterceptor.html",[3,0.164,4,0.146,5,0.127,9,0.366,10,1.461,15,1.639,20,0.765,22,1.461,23,0.015,24,1.255,25,0.538,26,1.031,28,4.981,30,2.98,31,1.074,38,0.323,40,0.99,42,0.725,43,2.231,50,0.164,51,0.053,52,2.787,53,1.348,69,1.158,73,0.011,74,0.011,81,2.126,133,4.209,135,5.119,154,1.575,253,5.689,254,3.504,282,3.243,504,5.689,505,3.894,506,5.876,507,4.486,508,4.921,509,4.486,510,5.876,511,4.694,512,6.954,513,4.486,514,5.876,515,4.486,516,4.486,517,4.486,518,4.486,519,4.486]],["title/classes/FirstMigration1731061477784.html",[51,0.046,520,3.075]],["body/classes/FirstMigration1731061477784.html",[3,0.075,4,0.067,5,0.058,9,0.426,10,0.823,11,1.556,20,0.541,22,0.823,23,0.013,24,1.305,25,0.594,26,0.581,31,0.792,32,2.258,36,0.53,38,0.101,50,0.075,51,0.024,52,2.056,64,2.706,73,0.006,74,0.006,164,1.678,182,1.764,232,1.074,237,0.85,241,1.2,245,0.823,291,0.75,313,1.364,314,1.471,316,1.471,317,1.604,318,2.056,319,3.167,320,1.364,322,1.604,328,1.364,333,6.621,341,1.276,342,1.604,346,1.604,352,1.471,375,1.604,376,1.604,377,1.604,405,1.604,417,1.471,436,1.497,437,1.276,438,1.276,461,6.111,484,0.782,520,3.723,521,4.137,522,1.782,523,4.156,524,3.309,525,3.309,526,3.575,527,1.276,528,2.053,529,3.309,530,5.477,531,2.053,532,3.309,533,2.053,534,6.622,535,5.748,536,4.766,537,2.93,538,5.227,539,2.585,540,4.774,541,5.586,542,2.585,543,4.589,544,4.766,545,7.306,546,2.053,547,3.743,548,2.053,549,5.586,550,5.623,551,1.826,552,3.309,553,3.309,554,3.723,555,1.782,556,5.227,557,1.782,558,1.782,559,1.782,560,2.053,561,2.053,562,2.053,563,4.156,564,2.053,565,4.156,566,2.053,567,3.309,568,2.053,569,2.053,570,4.766,571,1.364,572,2.053,573,2.053,574,2.053,575,4.156,576,2.053,577,1.731,578,1.276,579,1.471,580,2.053,581,1.471,582,2.053,583,6.112,584,4.766,585,2.053,586,2.053,587,2.053,588,6.112,589,4.137,590,3.309,591,4.766,592,4.766,593,3.309,594,2.961,595,3.414,596,3.414,597,4.766,598,3.309,599,2.053,600,3.309,601,3.309,602,2.053,603,4.766,604,6.622,605,2.053,606,2.053]],["title/classes/GetPostsBaseDto.html",[51,0.046,607,2.819]],["body/classes/GetPostsBaseDto.html",[3,0.179,4,0.159,5,0.139,9,0.4,20,0.81,23,0.015,25,0.57,26,1.262,38,0.337,50,0.179,51,0.08,73,0.011,74,0.011,169,1.801,245,1.548,291,1.793,305,2.031,309,2.219,345,4.203,392,3.996,607,4.459,608,3.832,609,5.937,610,5.937,611,6.226,612,4.906,613,4.906,614,4.259,615,5.937,616,3.868,617,4.259,618,3.048,619,3.26,620,4.259]],["title/classes/GetPostsDto.html",[51,0.046,618,2.445]],["body/classes/GetPostsDto.html",[3,0.195,4,0.173,5,0.152,23,0.015,38,0.35,50,0.195,51,0.083,73,0.012,74,0.012,291,1.949,305,2.208,309,2.413,345,3.833,392,4.151,607,3.821,608,4.167,609,4.631,610,4.631,614,4.631,615,6.167,616,4.413,617,4.631,618,4.075,619,4.359,620,5.695]],["title/classes/GetUsersParamDto.html",[51,0.046,621,2.615]],["body/classes/GetUsersParamDto.html",[3,0.182,4,0.162,5,0.142,9,0.407,20,0.65,23,0.015,25,0.632,26,1.104,38,0.34,50,0.182,51,0.081,73,0.011,74,0.011,169,1.443,232,2.042,237,2.066,245,1.565,291,1.823,305,2.066,307,3.1,309,2.257,323,4.331,324,4.181,380,2.326,387,4.915,390,5.462,392,3.677,537,3.375,621,4.181,622,4.331,623,6.293,624,4.99,625,4.99,626,4.99]],["title/controllers/GoogleAuthenticationController.html",[75,1.438,205,2.819]],["body/controllers/GoogleAuthenticationController.html",[3,0.17,4,0.151,5,0.132,9,0.379,10,1.494,13,1.922,15,1.696,20,0.604,22,1.154,23,0.015,24,0.991,25,0.425,26,0.815,31,1.111,38,0.36,42,0.751,50,0.17,51,0.054,53,1.395,69,1.199,73,0.011,74,0.011,75,1.696,77,1.767,162,2.712,163,2.309,164,2.002,169,1.343,179,2.712,182,2.248,186,4.03,187,2.884,188,4.03,192,3.626,202,3.733,205,4.304,217,4.03,627,5.216,628,4.03,629,3.325,630,5.216,631,4.694,632,4.03,633,4.967,634,4.642,635,4.03,636,4.642,637,4.642,638,4.642,639,4.642,640,4.642]],["title/injectables/GoogleAuthenticationService.html",[40,0.663,202,2.445]],["body/injectables/GoogleAuthenticationService.html",[3,0.121,4,0.108,5,0.094,9,0.271,10,1.187,11,1.558,13,2.796,15,1.745,18,3.73,19,4.78,20,0.797,22,1.187,23,0.015,24,1.02,25,0.513,26,0.838,31,1.143,38,0.343,39,1.831,40,0.805,41,2.061,42,0.537,43,1.65,46,2.204,47,2.88,50,0.121,51,0.039,52,2.061,53,1.681,54,2.592,55,2.371,60,1.501,61,1.676,62,1.736,64,1.964,69,1.233,73,0.009,74,0.009,154,1.165,163,1.65,164,1.681,173,1.263,202,2.967,203,4.066,220,3.461,226,2.376,232,1.55,242,2.88,245,1.187,274,1.736,436,2.16,437,2.967,438,2.967,494,2.592,499,1.831,571,3.173,629,2.376,631,3.73,632,4.145,633,4.308,635,2.88,641,5.629,642,2.88,643,5.595,644,6.753,645,3.318,646,4.775,647,3.318,648,3.318,649,2.88,650,5.595,651,2.592,652,3.318,653,3.318,654,3.318,655,4.775,656,3.318,657,3.318,658,3.318,659,3.318,660,3.318,661,3.318,662,3.318,663,2.592,664,3.318,665,3.318,666,3.318,667,3.318,668,3.318,669,3.318,670,2.88]],["title/classes/GoogleTokenDto.html",[51,0.046,633,2.615]],["body/classes/GoogleTokenDto.html",[3,0.202,4,0.18,5,0.157,9,0.452,20,0.721,23,0.014,25,0.507,36,1.733,38,0.273,50,0.202,51,0.079,57,5.641,73,0.012,74,0.012,169,1.601,245,1.668,291,2.023,303,3.511,305,2.292,393,3.704,633,4.458,671,4.806,672,5.537,673,5.537]],["title/interfaces/HandleDbErrorOptions.html",[674,1.865,675,2.819]],["body/interfaces/HandleDbErrorOptions.html",[3,0.17,4,0.151,5,0.132,9,0.379,11,1.293,23,0.015,25,0.551,26,1.237,32,2.2,34,3.084,36,1.93,38,0.229,42,0.751,50,0.17,55,1.63,60,2.1,61,1.63,62,2.429,64,1.63,69,1.199,73,0.011,74,0.011,228,2.562,237,3.15,245,1.494,274,2.429,366,4.849,480,3.325,499,2.562,674,2.2,675,4.772,676,2.884,677,3.626,678,4.03,679,5.216,680,3.992,681,4.642,682,4.642,683,4.642,684,4.03,685,4.642]],["title/injectables/HashingProvider.html",[40,0.663,201,2.173]],["body/injectables/HashingProvider.html",[3,0.171,4,0.152,5,0.133,9,0.382,10,1.503,20,0.787,22,1.503,23,0.015,24,1.291,25,0.554,26,1.061,31,1.447,32,3.351,36,2.016,38,0.231,40,1.019,42,0.758,50,0.171,51,0.055,73,0.011,74,0.011,154,1.645,201,3.337,276,5.248,277,5.248,278,5.248,279,6.507,280,5.81,282,3.337,283,5.248,686,4.068,687,7.626,688,4.687,689,4.687]],["title/interfaces/IActiveUser.html",[674,1.865,690,2.445]],["body/interfaces/IActiveUser.html",[3,0.205,4,0.182,5,0.159,9,0.457,23,0.014,25,0.619,36,1.874,50,0.205,73,0.012,74,0.012,245,1.68,380,2.449,436,3.408,663,5.886,674,2.653,676,3.479,690,4.198,691,4.861]],["title/interfaces/IGoogleUser.html",[475,2.615,674,1.865]],["body/interfaces/IGoogleUser.html",[3,0.192,4,0.17,5,0.149,9,0.428,23,0.014,25,0.675,36,2.09,50,0.192,73,0.012,74,0.012,245,1.613,436,3.331,437,4.575,438,4.575,475,4.31,571,4.893,674,2.483,676,3.255,692,4.548]],["title/interfaces/IUploadFile.html",[674,1.865,693,2.819]],["body/interfaces/IUploadFile.html",[3,0.182,4,0.162,5,0.142,9,0.407,23,0.014,24,1.546,25,0.724,36,2.039,38,0.246,50,0.182,73,0.011,74,0.011,245,1.565,380,2.326,578,4.496,579,5.184,581,5.184,674,2.364,676,3.1,693,4.507,694,4.331,695,5.184,696,3.898]],["title/modules/MailModule.html",[82,1.328,95,2.615]],["body/modules/MailModule.html",[3,0.147,4,0.131,5,0.114,11,1.122,23,0.015,38,0.354,39,2.224,42,0.652,43,2.004,50,0.147,51,0.047,61,1.414,70,1.909,73,0.01,74,0.01,82,2.096,84,1.823,85,1.742,86,2.004,87,2.004,88,1.823,89,3.089,90,3.089,95,4.882,102,2.721,103,2.004,104,2.004,106,2.224,151,3.498,163,2.004,232,1.308,329,2.677,335,3.019,469,4.841,508,4.127,526,2.224,578,2.503,680,2.677,697,3.498,698,3.498,699,3.498,700,4.03,701,5.471,702,4.03,703,4.03,704,3.918,705,3.148,706,4.03,707,5.471,708,4.03,709,4.03,710,3.498,711,4.03,712,4.03,713,4.03,714,3.498,715,3.498,716,4.03,717,4.03,718,4.03,719,4.03,720,3.498,721,4.03,722,4.03,723,4.03,724,4.03,725,4.03,726,4.03]],["title/injectables/MailService.html",[40,0.663,469,2.445]],["body/injectables/MailService.html",[3,0.166,4,0.147,5,0.129,9,0.371,10,1.473,11,1.836,15,1.659,20,0.771,22,1.473,23,0.015,24,1.408,25,0.543,26,1.04,30,3.017,31,1.087,32,2.807,38,0.325,40,0.998,42,0.734,50,0.166,51,0.053,64,1.594,73,0.011,74,0.011,81,2.152,154,1.594,164,1.981,232,2.352,329,3.017,436,2.054,469,3.68,704,4.243,705,3.547,720,3.942,727,3.942,728,5.924,729,4.541,730,7.432,731,4.541,732,5.924,733,4.541,734,3.547,735,4.541,736,5.142,737,4.541,738,5.924,739,4.541,740,4.541,741,3.942]],["title/entities/MetaOption.html",[742,1.865,743,2.3]],["body/entities/MetaOption.html",[3,0.151,4,0.134,5,0.117,9,0.337,20,0.914,23,0.015,25,0.663,36,1.437,38,0.274,50,0.151,51,0.048,73,0.01,74,0.01,169,2.032,182,2.571,245,1.383,335,3.071,345,3.933,352,3.985,380,1.877,400,3.429,417,4.506,484,1.572,537,2.845,539,4.914,542,4.914,595,2.959,742,2.636,743,3.251,744,2.567,745,3.587,746,4.914,747,4.132,748,4.18,749,4.132,750,2.745,751,3.697,752,4.132,753,3.587,754,4.83,755,4.83,756,4.132,757,4.132,758,4.914,759,4.132,760,3.227,761,3.697,762,4.83,763,4.83]],["title/controllers/MetaOptionsController.html",[75,1.438,764,2.819]],["body/controllers/MetaOptionsController.html",[3,0.175,4,0.156,5,0.136,9,0.391,10,1.525,11,1.884,20,0.624,22,1.192,23,0.015,24,1.024,25,0.439,26,0.841,31,1.148,38,0.333,42,0.775,50,0.175,51,0.056,53,1.44,69,1.238,73,0.011,74,0.011,75,1.752,77,1.825,81,2.272,115,3.185,162,2.801,164,2.033,169,1.387,173,1.825,179,2.801,182,2.283,332,3.936,400,2.907,680,4.076,764,4.394,765,4.161,766,6.135,767,4.794,768,4.794,769,5.325,770,3.953,771,4.161,772,4.161,773,4.794,774,4.794,775,4.794]],["title/modules/MetaOptionsModule.html",[82,1.328,96,2.445]],["body/modules/MetaOptionsModule.html",[3,0.173,4,0.154,5,0.134,23,0.015,38,0.362,42,0.765,50,0.173,51,0.055,73,0.011,74,0.011,77,2.315,82,2.269,84,2.14,85,2.046,86,2.353,87,2.353,88,2.14,89,3.344,90,3.344,96,4.748,102,3.026,103,2.353,104,2.353,106,2.612,111,2.94,112,2.046,400,2.242,743,2.765,764,4.816,770,4.665,771,4.108,776,4.108,777,4.108,778,4.108,779,4.732,780,4.732,781,4.108,782,4.732]],["title/injectables/MetaOptionsService.html",[40,0.663,770,2.3]],["body/injectables/MetaOptionsService.html",[3,0.143,4,0.127,5,0.111,9,0.319,10,1.333,11,1.983,13,1.619,15,1.959,20,0.796,22,1.521,23,0.015,24,1.306,25,0.56,26,1.073,31,1.283,38,0.351,40,0.903,42,0.632,50,0.143,51,0.046,53,1.175,55,1.882,64,1.882,69,1.384,73,0.01,74,0.01,112,1.691,154,1.373,164,2.139,173,2.04,332,3.632,380,2.064,400,3.118,465,2.666,468,3.632,482,2.43,484,1.489,596,3.839,743,3.573,769,3.395,770,3.132,772,3.395,781,3.395,783,3.395,784,3.911,785,3.911,786,5.361,787,5.361,788,3.911,789,5.361,790,6.116,791,4.712,792,3.911,793,5.361,794,3.911,795,3.911,796,3.911,797,5.361,798,3.911,799,3.911,800,3.911]],["title/interfaces/Paginated.html",[674,1.865,801,2.445]],["body/interfaces/Paginated.html",[3,0.182,4,0.161,5,0.141,9,0.406,23,0.014,25,0.708,36,1.925,50,0.182,73,0.011,74,0.011,115,4.803,245,1.561,282,3.99,380,2.439,511,3.562,674,2.356,676,3.089,801,3.901,802,4.317,803,6.275,804,5.376,805,7.229,806,4.317,807,4.317,808,4.317,809,4.317,810,4.317,811,4.317,812,4.317,813,4.317]],["title/classes/PaginatioQueryDto.html",[51,0.046,616,2.445]],["body/classes/PaginatioQueryDto.html",[3,0.178,4,0.158,5,0.138,9,0.398,20,0.807,23,0.015,25,0.625,26,1.259,38,0.305,50,0.178,51,0.08,73,0.011,74,0.011,169,1.793,245,1.541,291,1.781,305,2.018,307,3.028,341,4.235,380,2.421,392,3.983,526,3.422,527,3.851,616,3.851,814,4.231,815,5.326,816,5.382,817,6.2,818,4.874,819,4.44,820,4.874,821,6.818]],["title/modules/PaginationModule.html",[82,1.328,97,2.445]],["body/modules/PaginationModule.html",[3,0.187,4,0.166,5,0.145,23,0.014,38,0.315,42,0.827,50,0.187,51,0.06,73,0.012,74,0.012,82,2.352,84,2.312,85,2.21,86,2.542,87,2.542,88,2.312,89,3.466,90,3.177,97,4.831,102,3.177,103,2.542,104,2.542,822,4.437,823,4.437,824,4.437,825,4.989,826,5.112,827,5.112,828,5.112]],["title/injectables/PaginationProvider.html",[40,0.663,825,2.445]],["body/injectables/PaginationProvider.html",[3,0.127,4,0.113,5,0.099,9,0.283,10,1.225,11,1.597,13,1.435,15,1.267,20,0.641,22,1.425,23,0.015,24,1.052,25,0.525,26,0.865,31,0.83,32,2.335,34,4.684,38,0.338,39,1.914,40,0.83,42,0.561,45,2.483,50,0.127,51,0.041,53,1.042,55,2.529,61,1.217,64,1.73,69,0.895,73,0.011,74,0.009,115,2.303,128,2.483,154,1.217,164,1.723,282,1.914,468,3.891,484,1.32,511,2.483,616,3.879,801,3.061,803,3.01,804,2.708,806,3.01,807,4.977,808,3.01,809,4.977,810,3.01,811,3.01,812,3.01,813,3.01,819,4.472,825,3.061,829,3.01,830,5.733,831,3.467,832,3.467,833,3.467,834,3.467,835,4.928,836,3.467,837,3.467,838,3.467,839,3.467,840,3.467,841,3.467,842,7.205,843,5.733,844,3.467,845,4.928,846,3.467,847,3.467,848,3.467,849,3.467,850,3.467,851,3.467,852,3.467,853,4.928,854,3.467,855,3.467,856,3.467,857,3.467,858,3.467]],["title/entities/Post.html",[182,1.328,742,1.865]],["body/entities/Post.html",[3,0.089,4,0.079,5,0.069,9,0.198,20,0.917,23,0.015,25,0.693,26,1.236,36,1.758,37,2.347,38,0.309,50,0.089,51,0.028,70,3.517,73,0.007,74,0.007,169,2.037,182,1.275,232,1.949,245,0.939,313,3.082,314,3.322,315,4.923,316,4.644,317,3.623,318,2.882,319,3.082,320,3.082,321,2.882,322,3.623,332,1.34,335,3.579,345,2.207,374,4.43,380,1.275,398,2.107,399,2.107,400,1.79,401,2.107,404,5.065,484,0.924,526,2.889,537,2.098,540,2.951,547,2.706,551,3.315,554,4.089,595,3.322,734,1.896,742,1.79,743,3.058,744,1.508,748,3.082,750,4.308,751,4.891,753,2.107,761,4.425,762,2.107,763,3.28,859,2.107,860,3.623,861,2.428,862,3.778,863,6.006,864,2.428,865,2.428,866,4.301,867,4.301,868,2.951,869,2.428,870,2.428,871,3.778,872,2.428,873,2.428,874,2.428,875,2.428,876,3.28,877,2.428,878,2.428,879,2.107,880,3.778,881,2.428,882,2.428,883,3.28,884,2.428,885,3.778,886,3.28,887,3.778,888,2.107,889,2.428,890,2.428,891,2.428,892,2.428,893,2.428]],["title/controllers/PostsController.html",[75,1.438,894,2.819]],["body/controllers/PostsController.html",[3,0.103,4,0.092,5,0.08,9,0.231,10,1.055,11,1.938,20,0.737,22,1.408,23,0.015,24,1.21,25,0.519,26,0.994,31,1.356,36,1.316,38,0.335,42,0.457,50,0.103,51,0.033,53,0.849,61,1.489,69,1.462,73,0.008,74,0.008,75,1.032,77,1.075,81,1.339,118,1.877,162,1.651,164,2.191,169,1.638,173,1.939,179,2.977,182,2.348,232,1.654,237,2.345,309,1.278,311,3.961,320,2.819,329,3.763,380,2.151,465,2.11,537,1.919,543,3.314,594,1.755,618,3.519,690,3.519,894,3.039,895,2.453,896,2.024,897,5.095,898,4.243,899,5.095,900,5.095,901,2.825,902,4.243,903,2.825,904,5.664,905,4.917,906,3.683,907,2.825,908,2.825,909,2.825,910,3.683,911,2.825,912,2.825,913,4.917,914,4.243,915,2.825,916,3.314,917,2.825,918,4.52,919,4.243,920,4.243,921,2.825,922,4.917,923,4.243,924,4.243,925,2.825,926,2.825,927,2.207,928,2.453,929,3.683,930,3.165,931,2.453,932,3.98,933,4.423,934,2.453,935,2.453,936,2.453,937,2.453,938,3.314,939,2.825,940,2.825,941,2.825,942,2.825,943,2.825,944,2.825,945,3.314,946,3.683,947,2.825,948,2.825,949,2.825,950,2.825,951,2.825,952,2.825,953,2.825]],["title/modules/PostsModule.html",[82,1.328,98,2.615]],["body/modules/PostsModule.html",[3,0.149,4,0.133,5,0.116,23,0.015,38,0.378,42,0.661,50,0.149,51,0.048,73,0.01,74,0.01,77,2.102,82,2.111,84,1.848,85,1.767,86,2.032,87,2.032,88,1.848,89,3.111,90,2.032,96,4.481,97,4.481,98,5.251,99,4.481,101,4.214,102,2.746,103,2.032,104,2.032,106,3.048,111,2.538,112,1.767,116,3.547,182,1.379,208,3.547,400,2.617,743,2.387,888,3.547,894,4.48,930,4.481,931,3.547,954,3.547,955,4.086,956,3.547,957,4.086,958,4.086,959,3.547,960,4.086,961,4.086,962,4.086]],["title/injectables/PostsService.html",[40,0.663,930,2.445]],["body/injectables/PostsService.html",[3,0.087,4,0.077,5,0.067,9,0.194,10,0.923,11,1.951,13,2.323,15,1.356,20,0.73,22,1.395,23,0.015,24,1.198,25,0.514,26,0.985,31,1.238,32,1.759,38,0.35,40,0.625,42,0.384,50,0.087,51,0.028,53,1.553,55,2.088,60,2.338,61,1.815,62,2.391,64,2.182,69,1.335,70,1.124,73,0.007,74,0.007,112,1.026,154,0.833,164,2.105,173,1.74,182,1.542,219,2.06,220,2.959,226,1.699,228,2.853,229,1.576,274,2.391,282,2.048,311,3.212,321,3.212,380,2.364,381,2.06,400,1.124,465,1.846,468,2.853,478,1.699,480,3.274,482,1.474,484,0.903,499,2.523,537,2.067,543,2.899,551,1.309,594,3.212,596,2.658,618,3.212,754,3.222,770,3.632,801,1.474,825,3.862,860,2.899,913,4.488,916,4.383,918,4.275,930,2.306,935,2.06,936,2.06,937,2.06,959,2.06,963,2.06,964,3.968,965,3.632,966,4.571,967,2.373,968,3.711,969,2.373,970,3.222,971,2.373,972,2.373,973,2.373,974,3.711,975,2.373,976,2.373,977,2.373,978,2.373,979,2.373,980,2.373,981,2.373,982,2.373,983,2.373,984,2.373,985,2.06,986,2.373,987,2.373,988,2.373,989,2.373,990,2.373,991,2.373,992,3.711,993,2.373,994,4.571,995,3.711,996,2.373,997,2.373,998,4.571,999,2.373,1000,2.06,1001,2.373,1002,2.373,1003,2.373]],["title/classes/RefreshTokenDto.html",[51,0.046,168,2.445]],["body/classes/RefreshTokenDto.html",[3,0.202,4,0.18,5,0.157,9,0.452,20,0.721,23,0.014,25,0.507,36,1.733,38,0.273,50,0.202,51,0.079,73,0.012,74,0.012,168,4.169,169,1.601,245,1.668,291,2.023,303,3.511,305,2.292,393,3.704,1004,4.806,1005,6.268,1006,4.806,1007,5.537]],["title/classes/SignInDto.html",[51,0.046,175,2.615]],["body/classes/SignInDto.html",[3,0.192,4,0.17,5,0.149,9,0.428,20,0.845,23,0.014,25,0.594,36,1.902,38,0.258,50,0.192,51,0.076,73,0.012,74,0.012,169,1.876,175,4.31,241,4.117,245,1.613,291,1.914,303,3.687,305,2.169,393,3.581,436,3.188,457,5.632,1006,4.548,1008,4.548,1009,5.24,1010,5.24,1011,5.24]],["title/entities/Tag.html",[551,2.173,742,1.865]],["body/entities/Tag.html",[3,0.116,4,0.103,5,0.09,9,0.258,20,0.948,23,0.015,24,1.164,25,0.701,36,1.928,38,0.227,50,0.116,51,0.037,70,3.452,73,0.008,74,0.008,169,2.107,182,2.243,237,2.256,245,1.148,318,3.385,319,3.62,335,3.305,345,3.883,484,1.205,537,2.465,547,4.289,551,2.548,554,4.678,555,4.73,557,4.73,558,4.73,559,4.73,595,3.307,742,2.188,744,1.968,746,4.256,748,3.62,750,4.23,751,4.841,755,4.008,758,4.256,760,2.474,761,4.415,866,4.76,867,4.76,868,3.607,876,4.008,879,2.749,883,4.008,886,4.008,896,3.903,1000,4.008,1012,2.749,1013,3.167,1014,5.449,1015,3.167,1016,3.167,1017,3.167,1018,3.167,1019,3.167,1020,3.167,1021,3.167,1022,3.167,1023,3.167]],["title/controllers/TagsController.html",[75,1.438,1024,2.819]],["body/controllers/TagsController.html",[3,0.143,4,0.127,5,0.111,9,0.32,10,1.335,11,2.098,20,0.797,22,1.523,23,0.015,24,1.308,25,0.561,26,1.075,31,1.466,38,0.302,42,0.634,50,0.143,51,0.046,69,1.581,73,0.01,74,0.01,75,1.433,77,1.493,81,1.858,162,2.291,164,2.264,169,1.771,173,2.331,179,2.291,182,2.067,321,2.436,380,2.404,422,4.734,537,2.979,594,2.436,910,4.662,927,3.063,965,3.578,1024,3.846,1025,3.404,1026,5.37,1027,5.37,1028,5.37,1029,3.922,1030,3.922,1031,3.922,1032,3.922,1033,3.922,1034,5.37,1035,5.37,1036,3.922,1037,5.316,1038,3.404,1039,3.404,1040,3.922,1041,3.922,1042,3.922,1043,3.922,1044,3.922,1045,3.922,1046,3.922]],["title/modules/TagsModule.html",[82,1.328,99,2.445]],["body/modules/TagsModule.html",[3,0.174,4,0.154,5,0.135,23,0.015,38,0.362,42,0.768,50,0.174,51,0.056,73,0.011,74,0.011,77,2.32,82,2.272,84,2.147,85,2.053,86,2.361,87,2.361,88,2.147,89,3.349,90,3.349,99,4.752,102,3.032,103,2.361,104,2.361,106,2.62,111,2.949,112,2.053,551,2.62,965,4.667,1024,4.823,1038,4.121,1047,4.121,1048,4.121,1049,4.121,1050,4.747,1051,4.747,1052,4.121,1053,4.747]],["title/injectables/TagsService.html",[40,0.663,965,2.3]],["body/injectables/TagsService.html",[3,0.124,4,0.11,5,0.096,9,0.276,10,1.205,11,2.106,13,1.402,15,1.771,20,0.851,22,1.625,23,0.015,24,1.396,25,0.599,26,1.147,31,1.479,38,0.322,40,0.817,42,0.548,50,0.124,51,0.04,53,1.018,55,1.701,64,1.987,69,1.595,70,2.296,73,0.011,74,0.009,112,1.465,154,1.189,164,2.272,173,2.351,321,2.104,380,2.46,422,4.343,465,2.41,468,3.41,482,2.104,484,1.289,526,1.869,527,2.104,537,2.957,551,2.675,594,3.011,965,2.832,970,4.207,985,4.207,1039,2.94,1052,2.94,1054,2.94,1055,4.847,1056,4.847,1057,3.387,1058,3.387,1059,4.847,1060,4.847,1061,3.387,1062,3.387,1063,4.847,1064,3.387,1065,4.847,1066,3.387,1067,3.387,1068,3.387,1069,3.387,1070,3.387,1071,3.387,1072,3.387,1073,3.387]],["title/injectables/TokensProvider.html",[40,0.663,203,2.3]],["body/injectables/TokensProvider.html",[3,0.107,4,0.095,5,0.083,9,0.238,10,1.08,11,1.954,13,2.149,15,1.587,16,2.531,17,5.6,18,4.055,19,4.494,20,0.749,22,1.53,23,0.015,24,1.229,25,0.564,26,1.01,31,1.243,38,0.352,39,1.609,40,0.732,41,1.811,42,0.471,43,1.45,44,1.937,46,1.937,50,0.107,51,0.034,53,1.56,54,2.277,55,1.822,60,1.319,61,1.023,62,1.525,63,4.994,64,1.822,69,1.34,73,0.008,74,0.008,154,1.023,164,2.109,165,3.393,167,3.771,168,3.822,173,1.976,189,2.277,203,2.538,206,1.811,212,2.531,220,3.415,226,2.088,231,2.277,232,2.093,274,1.525,355,2.277,380,2.177,436,1.319,499,1.609,663,3.393,670,2.531,690,1.811,734,2.277,736,2.531,804,4.494,916,3.393,1005,3.771,1074,2.531,1075,4.344,1076,4.344,1077,2.915,1078,4.344,1079,2.915,1080,2.915,1081,4.344,1082,6.152,1083,2.915,1084,2.915,1085,2.915,1086,2.915,1087,2.915,1088,2.915,1089,4.344,1090,2.915,1091,2.915,1092,2.915,1093,2.915,1094,2.915,1095,2.915,1096,2.915,1097,4.344,1098,4.344,1099,4.344,1100,4.344,1101,4.344,1102,4.344,1103,2.915,1104,2.915,1105,2.915,1106,2.915]],["title/classes/UpdatePostDto.html",[51,0.046,918,2.615]],["body/classes/UpdatePostDto.html",[3,0.211,4,0.187,5,0.164,23,0.014,38,0.339,50,0.211,51,0.068,73,0.012,74,0.012,291,2.111,309,2.613,311,3.589,619,4.574,918,4.574,1107,5.014,1108,6.884,1109,4.512,1110,5.777]],["title/classes/UpdatePostMetaOptionsDto.html",[51,0.046,791,2.819]],["body/classes/UpdatePostMetaOptionsDto.html",[3,0.203,4,0.18,5,0.158,23,0.014,38,0.356,50,0.203,51,0.079,73,0.012,74,0.012,291,2.031,303,2.908,305,2.301,309,2.514,332,3.067,391,3.98,393,3.067,396,3.692,400,2.633,619,4.469,791,4.817,1109,4.341,1111,4.824,1112,6.726,1113,5.558]],["title/classes/UpdateUserDto.html",[51,0.046,1114,2.819]],["body/classes/UpdateUserDto.html",[3,0.21,4,0.187,5,0.163,23,0.014,38,0.338,50,0.21,51,0.067,73,0.012,74,0.012,291,2.102,294,3.176,306,4.995,619,4.563,1109,4.495,1114,4.919,1115,4.995,1116,6.868,1117,4.995,1118,4.995]],["title/entities/Upload.html",[577,2.06,742,1.865]],["body/entities/Upload.html",[3,0.126,4,0.111,5,0.098,9,0.28,20,0.936,23,0.015,24,1.218,25,0.714,36,1.856,37,2.134,38,0.241,50,0.126,51,0.04,73,0.009,74,0.009,169,2.079,245,1.217,335,4.095,345,3.632,380,2.098,404,4.856,484,1.307,526,2.702,537,2.58,539,4.455,542,4.455,577,2.561,578,3.543,579,4.085,581,4.085,695,4.085,696,2.683,742,2.319,744,2.134,746,4.455,748,3.789,750,4.366,751,4.929,758,4.455,761,4.539,866,5.148,867,5.148,868,5.337,1119,2.981,1120,3.435,1121,3.435,1122,4.895,1123,3.435,1124,3.435,1125,3.435,1126,3.435,1127,3.435,1128,3.435,1129,2.981]],["title/injectables/UploadToAwsProvider.html",[40,0.663,1130,2.445]],["body/injectables/UploadToAwsProvider.html",[3,0.137,4,0.122,5,0.17,9,0.306,10,1.295,11,1.666,13,2.477,15,1.371,20,0.779,22,1.488,23,0.015,24,1.278,25,0.548,26,1.05,31,1.247,32,1.777,36,0.968,38,0.335,40,0.878,42,0.607,43,1.866,50,0.137,51,0.044,53,1.127,55,1.828,60,1.697,61,2.1,62,1.963,64,1.317,69,1.345,73,0.009,74,0.009,81,1.777,154,1.317,164,1.798,173,1.428,179,2.192,274,1.963,480,2.687,499,2.07,500,3.256,508,4.294,540,4.068,550,3.256,577,1.963,578,3.235,1130,3.235,1131,5.611,1132,3.256,1133,5.208,1134,5.208,1135,3.751,1136,3.751,1137,5.208,1138,5.208,1139,5.49,1140,3.751,1141,5.208,1142,3.751,1143,5.611,1144,2.93,1145,3.256,1146,3.751,1147,3.751,1148,3.256,1149,3.751,1150,3.256,1151,3.751,1152,3.751,1153,3.751,1154,3.751,1155,3.256,1156,3.751,1157,4.068,1158,3.751,1159,3.751,1160,3.751,1161,3.751,1162,3.751,1163,3.751,1164,3.751]],["title/controllers/UploadsController.html",[75,1.438,1165,2.819]],["body/controllers/UploadsController.html",[3,0.159,4,0.141,5,0.183,9,0.355,10,1.432,20,0.567,22,1.082,23,0.015,24,1.379,25,0.528,26,0.764,31,1.042,38,0.339,42,0.704,45,3.117,50,0.159,51,0.051,53,1.308,57,3.4,61,2.022,69,1.124,73,0.01,74,0.01,75,1.59,77,1.657,81,2.062,162,2.543,164,1.94,169,1.259,182,1.469,237,2.385,282,2.402,309,1.969,313,2.892,328,3.827,577,3.014,932,4.5,945,3.4,1139,5.044,1165,4.126,1166,3.778,1167,4.353,1168,5.001,1169,3.778,1170,4.353,1171,4.353,1172,4.353,1173,4.353,1174,4.353,1175,3.778,1176,4.353,1177,3.778,1178,4.353,1179,5.761,1180,4.011,1181,3.778,1182,4.353,1183,4.353,1184,4.353,1185,3.778,1186,3.778,1187,3.778,1188,4.353,1189,4.353,1190,4.353]],["title/modules/UploadsModule.html",[82,1.328,100,2.615]],["body/modules/UploadsModule.html",[3,0.172,4,0.153,5,0.134,23,0.015,38,0.37,42,0.76,50,0.172,51,0.055,73,0.011,74,0.011,77,2.306,82,2.262,84,2.127,85,2.033,86,2.338,87,2.338,88,2.127,89,3.334,90,2.338,100,5.137,102,3.013,103,2.338,104,2.338,106,2.595,111,2.921,112,2.033,577,2.46,1130,4.66,1165,4.801,1180,4.66,1181,4.081,1191,4.081,1192,4.081,1193,4.702,1194,4.702,1195,4.702,1196,4.081,1197,4.081,1198,4.702]],["title/injectables/UploadsService.html",[40,0.663,1180,2.445]],["body/injectables/UploadsService.html",[3,0.133,4,0.118,5,0.145,9,0.298,10,1.27,11,1.641,13,2.44,15,1.867,20,0.665,22,1.27,23,0.015,24,1.259,25,0.585,26,0.896,31,0.873,38,0.36,40,0.861,42,0.59,43,1.814,50,0.133,51,0.043,53,1.771,55,2.069,60,2.311,61,1.793,62,1.909,64,1.281,69,0.942,73,0.009,74,0.009,112,1.578,154,1.281,164,1.771,173,1.388,274,1.909,468,3.525,478,2.613,479,2.85,482,2.266,484,1.388,499,2.014,503,3.167,508,4.752,577,3.084,578,2.266,579,2.613,581,2.613,693,3.659,695,2.613,696,2.85,1129,3.167,1130,4.444,1139,4.605,1155,4.434,1157,3.99,1168,5.117,1169,4.434,1180,3.173,1196,3.167,1197,3.167,1199,3.167,1200,3.648,1201,3.648,1202,5.108,1203,3.648,1204,3.648,1205,3.648,1206,3.648,1207,3.648,1208,3.648,1209,3.648,1210,3.648,1211,3.648,1212,3.648,1213,3.648,1214,3.648,1215,3.648,1216,3.648]],["title/entities/User.html",[232,1.277,742,1.865]],["body/entities/User.html",[3,0.126,4,0.112,5,0.098,9,0.281,20,0.916,23,0.015,25,0.695,26,1.092,36,1.916,38,0.281,50,0.126,51,0.057,70,3.24,73,0.009,74,0.009,169,2.035,182,2.22,232,1.591,241,3.337,245,1.219,307,2.139,335,3.435,380,1.655,436,2.583,437,3.548,438,3.548,484,1.31,537,2.583,547,3.512,571,3.794,742,2.323,744,2.139,748,3.794,750,4.37,751,4.931,760,2.689,761,4.542,866,5.316,867,5.151,896,4.09,1217,2.988,1218,7.192,1219,3.443,1220,3.443,1221,4.903,1222,3.443,1223,3.443,1224,3.443,1225,3.443,1226,3.443,1227,4.903,1228,3.443,1229,5.711,1230,3.443,1231,3.443]],["title/controllers/UsersController.html",[75,1.438,1232,2.819]],["body/controllers/UsersController.html",[3,0.097,4,0.086,5,0.075,9,0.217,10,1.007,11,2.003,20,0.715,22,1.365,23,0.015,24,1.33,25,0.612,26,0.963,31,1.314,38,0.337,42,0.43,50,0.097,51,0.031,53,0.798,61,1.422,69,1.526,73,0.007,74,0.007,75,0.971,77,1.011,81,1.259,162,1.552,163,1.321,164,2.162,169,1.588,173,1.868,179,1.552,182,1.366,187,1.65,192,3.163,220,2.441,232,1.781,237,2.578,256,2.306,290,3.41,293,4.638,294,3.03,297,4.288,309,1.201,324,3.647,335,3.03,341,4.147,380,2.483,481,2.075,621,3.647,815,4.864,816,2.306,819,2.9,922,2.306,927,3.163,928,4.26,929,4.765,932,3.163,933,3.515,934,2.306,945,2.075,946,3.515,1037,4.26,1114,3.931,1175,2.306,1232,2.9,1233,2.306,1234,4.05,1235,4.05,1236,4.908,1237,4.05,1238,2.656,1239,4.05,1240,2.656,1241,2.656,1242,2.656,1243,2.656,1244,2.656,1245,2.656,1246,2.656,1247,4.05,1248,4.05,1249,2.656,1250,4.05,1251,3.515,1252,2.656,1253,4.05,1254,4.05,1255,4.05,1256,2.656,1257,4.05,1258,3.163,1259,2.656,1260,4.05,1261,2.656,1262,2.656,1263,2.656,1264,2.656,1265,2.306,1266,2.656,1267,2.306,1268,4.908,1269,2.075,1270,2.656,1271,2.656,1272,2.656,1273,2.656,1274,2.306,1275,2.656,1276,2.656,1277,2.656,1278,2.656,1279,2.656,1280,2.656,1281,2.656,1282,2.656,1283,2.656,1284,2.656,1285,2.656,1286,2.656,1287,2.656]],["title/injectables/UsersCreateManyProvider.html",[40,0.663,1288,2.445]],["body/injectables/UsersCreateManyProvider.html",[3,0.134,4,0.119,5,0.104,9,0.3,10,1.277,11,1.877,15,1.343,20,0.668,22,1.277,23,0.015,24,1.097,25,0.471,26,0.901,31,0.88,38,0.332,40,0.865,42,0.594,50,0.134,51,0.043,53,1.104,55,2.249,60,1.663,61,1.29,62,1.923,64,2.366,69,0.949,73,0.009,74,0.009,81,1.742,118,2.442,154,1.29,164,1.778,173,1.399,228,3.267,229,2.442,232,2.079,237,1.522,274,1.923,290,3.98,366,3.412,465,2.943,478,2.633,479,2.871,483,2.633,484,1.399,494,2.871,499,2.029,530,3.191,1269,2.871,1288,3.19,1289,5.138,1290,3.191,1291,4.458,1292,3.676,1293,6.984,1294,3.676,1295,4.458,1296,3.676,1297,3.191,1298,5.135,1299,3.676,1300,3.676,1301,3.676,1302,3.191,1303,3.676,1304,3.676,1305,3.676,1306,3.676,1307,3.676,1308,3.676,1309,3.676,1310,3.676,1311,3.676,1312,3.676,1313,3.676,1314,3.676,1315,3.676,1316,3.676,1317,3.676]],["title/modules/UsersModule.html",[82,1.328,101,2.3]],["body/modules/UsersModule.html",[3,0.153,4,0.136,5,0.119,23,0.015,38,0.371,42,0.676,50,0.153,51,0.049,73,0.01,74,0.01,77,2.134,82,2.135,84,1.89,85,1.807,86,2.078,87,2.078,88,1.89,89,3.147,90,3.147,94,3.483,101,4.547,102,2.788,103,2.078,104,2.078,106,2.306,111,2.596,112,1.807,206,3.483,220,3.898,232,1.356,462,4.51,465,2.078,483,2.993,1232,4.532,1267,3.627,1288,4.51,1318,3.627,1319,3.627,1320,3.627,1321,4.179,1322,4.179,1323,4.179,1324,4.179,1325,3.627,1326,4.179,1327,3.627,1328,4.179]],["title/injectables/UsersService.html",[40,0.663,220,1.958]],["body/injectables/UsersService.html",[3,0.08,4,0.071,5,0.063,9,0.18,10,0.87,11,2.087,13,1.802,15,1.278,20,0.816,22,1.559,23,0.015,24,1.339,25,0.574,26,1.1,31,1.446,36,1.488,37,1.368,38,0.339,39,1.215,40,0.59,41,1.368,42,0.356,50,0.08,51,0.051,53,1.051,55,0.773,60,1.582,61,1.528,64,1.228,69,1.488,73,0.006,74,0.006,112,0.952,118,3.295,154,0.773,163,1.74,164,2.251,173,2.193,181,1.911,183,1.286,206,1.368,220,1.74,228,2.403,229,1.463,232,2.148,237,1.802,290,3.081,293,3.876,294,2.987,320,1.463,341,2.705,355,2.733,380,2.179,436,1.582,462,3.753,465,2.467,466,3.037,467,1.911,468,2.737,471,3.037,472,3.037,474,3.037,475,3.295,477,1.911,481,1.72,482,1.368,483,1.577,484,0.838,486,1.911,488,1.911,493,3.037,535,2.733,537,2.243,571,2.324,621,3.828,815,3.401,964,3.779,1157,1.72,1258,1.72,1265,1.911,1269,1.72,1288,3.753,1291,3.037,1295,3.037,1297,1.911,1302,3.037,1325,1.911,1327,1.911,1329,1.911,1330,3.499,1331,3.499,1332,3.499,1333,3.499,1334,3.499,1335,3.499,1336,2.202,1337,3.499,1338,3.037,1339,2.202,1340,2.202,1341,2.202,1342,2.202,1343,2.202,1344,4.96,1345,3.499,1346,2.202,1347,3.499,1348,2.202,1349,3.499,1350,2.202,1351,3.499,1352,3.499,1353,2.202,1354,3.499,1355,2.202,1356,2.202,1357,2.202,1358,2.202,1359,2.202,1360,2.202,1361,2.202,1362,2.202,1363,3.499,1364,1.911,1365,2.202,1366,2.202,1367,2.202,1368,2.202]],["title/coverage.html",[1369,4.674]],["body/coverage.html",[0,2.726,1,1.458,5,0.062,6,1.905,7,1.572,8,1.905,23,0.015,25,0.201,40,1.227,48,1.715,51,0.084,61,0.77,73,0.006,74,0.006,75,2.288,76,1.572,78,1.905,79,1.364,88,0.993,105,1.715,131,1.572,133,1.572,135,1.715,139,1.458,155,1.905,160,1.572,161,1.905,163,1.092,168,1.364,175,1.458,182,0.741,183,1.282,201,1.211,202,1.364,203,1.282,205,1.572,210,1.572,218,1.905,220,1.092,228,1.211,232,0.712,244,1.905,257,1.715,275,1.905,290,1.364,292,1.905,294,1.211,311,1.364,312,1.905,332,1.211,400,2.561,419,1.905,422,1.458,423,1.905,435,1.905,462,1.364,463,1.905,464,1.905,465,1.092,469,1.364,475,1.458,504,1.905,505,1.905,520,1.715,521,1.905,522,1.905,535,1.715,551,1.211,577,1.148,607,1.572,608,2.726,616,1.364,618,1.364,621,1.458,622,1.905,627,1.905,628,1.905,633,1.458,641,1.905,642,1.905,671,1.905,674,2.561,675,1.572,677,2.726,678,4.691,686,1.905,690,1.364,691,1.905,692,1.905,693,1.572,694,1.905,727,1.905,742,2.561,743,1.282,745,1.905,764,1.572,765,1.905,770,1.282,783,1.905,791,1.572,801,1.364,802,1.905,814,1.905,825,1.364,829,1.905,859,1.905,894,1.572,895,1.905,918,1.458,930,1.364,938,1.715,963,1.905,965,1.282,1004,1.905,1008,1.905,1012,1.905,1024,1.572,1025,1.905,1054,1.905,1074,1.905,1107,1.905,1111,1.905,1114,1.572,1115,1.905,1119,1.905,1130,1.364,1131,1.905,1132,1.905,1165,1.572,1166,1.905,1180,1.364,1199,1.905,1217,1.905,1232,1.572,1233,1.905,1288,1.364,1289,1.905,1290,1.905,1329,1.905,1369,1.905,1370,1.905,1371,2.195,1372,2.195,1373,8.161,1374,7.604,1375,1.905,1376,1.905,1377,6.452,1378,6.452,1379,6.972,1380,3.03,1381,1.905,1382,1.905,1383,6.262,1384,6.034,1385,1.905,1386,2.195,1387,4.951,1388,2.195,1389,2.195,1390,1.905,1391,1.715,1392,1.905,1393,1.905,1394,1.905,1395,1.905,1396,1.905,1397,4.298,1398,4.298,1399,4.298,1400,1.905,1401,1.905,1402,1.905,1403,1.905,1404,2.195]],["title/dependencies.html",[85,2.049,1405,2.849]],["body/dependencies.html",[23,0.015,42,0.751,43,2.309,44,3.084,45,3.325,51,0.07,73,0.011,74,0.011,85,2.007,112,2.007,128,3.325,139,3.084,163,2.309,254,3.626,285,4.03,305,1.922,307,2.884,309,2.1,484,1.767,629,3.325,651,3.626,704,3.325,705,3.626,1117,4.03,1118,4.03,1144,3.626,1145,4.03,1148,4.03,1177,4.03,1406,4.642,1407,4.642,1408,4.642,1409,6.663,1410,4.642,1411,4.642,1412,4.642,1413,4.642,1414,4.642,1415,4.642,1416,4.642,1417,4.642,1418,4.642,1419,4.642,1420,4.642,1421,4.642,1422,4.642,1423,4.642,1424,4.642,1425,4.642,1426,4.642,1427,4.642,1428,4.642,1429,4.642,1430,4.03,1431,4.642,1432,4.642,1433,4.642,1434,4.642,1435,4.642,1436,4.642,1437,4.642]],["title/miscellaneous/enumerations.html",[1438,2.039,1439,4.113]],["body/miscellaneous/enumerations.html",[9,0.409,23,0.015,73,0.011,74,0.011,182,2.128,187,3.918,316,4.517,328,4.19,341,3.918,342,4.926,346,4.926,374,4.926,375,4.926,376,4.926,377,4.926,405,4.926,527,4.974,695,4.517,1186,5.474,1438,3.11,1439,4.346,1440,5.007,1441,5.007,1442,5.007,1443,5.007,1444,5.007,1445,6.306,1446,5.007,1447,5.007,1448,5.007]],["title/miscellaneous/functions.html",[1438,2.039,1449,4.113]],["body/miscellaneous/functions.html",[9,0.396,22,1.692,23,0.014,24,1.454,25,0.624,26,1.195,31,1.63,32,2.931,73,0.011,74,0.011,88,3.079,228,3.414,508,4.11,526,2.681,527,3.018,649,4.217,675,4.431,677,3.794,679,4.217,680,4.11,710,4.217,1375,4.217,1376,5.37,1385,4.217,1390,4.217,1391,4.832,1392,5.37,1393,5.909,1394,4.217,1395,5.37,1396,5.37,1438,3.018,1449,4.217,1450,4.858,1451,4.858,1452,4.858,1453,4.858,1454,4.858,1455,4.858,1456,6.187,1457,4.858,1458,4.858,1459,4.858]],["title/index.html",[9,0.268,1460,3.282,1461,3.282]],["body/index.html",[4,0.071,5,0.099,23,0.006,34,1.463,73,0.006,74,0.006,85,0.952,115,3.295,118,3.828,139,2.324,163,1.095,182,1.181,195,1.911,232,1.756,245,0.547,247,1.911,255,1.911,282,2.737,293,3.552,313,2.324,318,1.368,321,2.705,324,4.488,328,2.892,329,3.295,339,4.305,352,1.577,353,2.733,354,1.911,362,1.72,369,1.72,452,3.779,454,1.911,465,3.118,468,1.215,484,1.888,511,1.577,577,2.278,589,1.911,594,1.368,596,2.506,629,3.552,630,3.779,631,2.733,651,2.733,680,3.295,684,1.911,704,3.118,714,1.911,715,1.911,741,1.911,801,1.368,819,1.577,896,4.127,905,1.911,906,3.037,1143,3.037,1144,3.874,1150,1.911,1185,1.911,1187,4.698,1251,1.911,1258,3.874,1274,1.911,1338,3.779,1364,1.911,1370,4.305,1391,1.72,1430,1.911,1462,2.202,1463,2.202,1464,5.412,1465,3.499,1466,2.202,1467,4.96,1468,3.499,1469,2.202,1470,3.499,1471,2.202,1472,2.202,1473,2.202,1474,1.911,1475,4.354,1476,3.499,1477,3.499,1478,2.202,1479,2.202,1480,2.202,1481,2.202,1482,2.202,1483,4.354,1484,2.202,1485,2.202,1486,2.202,1487,2.202,1488,3.499,1489,2.202,1490,3.499,1491,2.202,1492,3.499,1493,2.202,1494,3.499,1495,2.202,1496,2.202,1497,2.202,1498,2.202,1499,3.499,1500,2.202,1501,2.202,1502,3.499,1503,2.202,1504,4.354,1505,3.499,1506,3.499,1507,2.202,1508,3.499,1509,2.202,1510,4.354,1511,2.202,1512,2.202,1513,3.499,1514,3.499,1515,2.202,1516,2.202,1517,2.202,1518,2.202,1519,2.202,1520,2.202,1521,2.202,1522,2.202,1523,3.499,1524,2.202,1525,2.202,1526,2.202,1527,2.202,1528,2.202,1529,2.202,1530,4.96,1531,2.202,1532,2.202,1533,4.96,1534,3.499,1535,2.202,1536,2.202,1537,2.202,1538,2.202,1539,3.499,1540,3.499,1541,3.499,1542,4.354,1543,2.202,1544,2.202,1545,2.202,1546,2.202,1547,2.202,1548,2.202,1549,2.202,1550,2.202,1551,2.202,1552,2.202,1553,2.202,1554,2.202,1555,2.202,1556,2.202,1557,2.202,1558,2.202,1559,3.499,1560,3.499,1561,2.202,1562,2.202,1563,2.202,1564,2.202,1565,2.202,1566,2.202,1567,2.202,1568,2.202,1569,4.354,1570,2.202,1571,3.499,1572,2.202,1573,2.202,1574,2.202,1575,2.202,1576,2.202,1577,2.202,1578,2.202,1579,2.202,1580,2.202,1581,2.202,1582,2.202,1583,2.202,1584,2.202,1585,2.202,1586,6.874,1587,2.202,1588,3.499,1589,2.202,1590,2.202,1591,3.499,1592,2.202,1593,2.202,1594,2.202,1595,2.202,1596,2.202,1597,6.269,1598,2.202,1599,3.499,1600,2.202,1601,4.96,1602,2.202,1603,2.202,1604,2.202,1605,2.202,1606,2.202,1607,2.202,1608,2.202,1609,2.202,1610,2.202,1611,2.202,1612,2.202,1613,2.202,1614,2.202,1615,2.202,1616,2.202,1617,2.202,1618,2.202,1619,2.202,1620,2.202,1621,2.202,1622,2.202,1623,2.202,1624,2.202,1625,2.202,1626,2.202,1627,2.202,1628,2.202,1629,2.202,1630,2.202,1631,2.202,1632,2.202,1633,2.202,1634,4.96,1635,3.499,1636,2.202,1637,2.202,1638,2.202,1639,2.202,1640,2.202,1641,4.354,1642,2.202,1643,2.202,1644,2.202,1645,2.202,1646,2.202,1647,2.202,1648,3.499,1649,2.202,1650,2.202,1651,2.202,1652,2.202,1653,2.202,1654,3.499,1655,2.202,1656,2.202,1657,2.202,1658,2.202]],["title/modules.html",[84,2.435]],["body/modules.html",[23,0.012,73,0.012,74,0.012,83,3.807,84,2.404,94,3.302,95,3.532,96,3.302,97,3.302,98,3.532,99,3.302,100,3.532,101,3.106,1659,7.983,1660,7.983,1661,7.983,1662,7.983]],["title/overview.html",[1663,4.674]],["body/overview.html",[2,2.422,23,0.015,73,0.008,74,0.008,77,1.18,79,3.344,82,1.046,83,5.61,84,1.402,85,1.341,86,1.542,87,1.542,88,1.402,89,1.542,90,1.542,91,2.691,92,2.691,93,2.691,94,4.566,95,4.382,96,4.234,97,4.234,98,4.988,99,4.234,100,4.528,101,4.294,102,2.261,103,1.542,104,1.542,154,1.088,183,3.982,198,2.691,199,2.691,200,2.691,201,3.272,202,3.344,203,3.145,220,3.39,291,1.133,365,2.422,462,3.344,469,4.234,676,1.926,697,2.691,698,2.691,699,2.691,744,1.926,770,3.982,776,2.691,777,2.691,778,2.691,822,2.691,823,2.691,824,2.691,825,4.234,930,3.344,954,2.691,956,2.691,965,3.982,1047,2.691,1048,2.691,1049,2.691,1130,3.344,1180,3.344,1191,2.691,1192,2.691,1288,3.344,1318,2.691,1319,2.691,1320,2.691,1663,2.691,1664,3.1,1665,4.546,1666,3.1,1667,3.1,1668,3.1]],["title/properties.html",[245,1.178,1405,2.849]],["body/properties.html",[23,0.014,73,0.013,74,0.013,237,2.52,245,1.514,860,4.756,1474,5.285,1669,6.089,1670,6.089,1671,6.089]],["title/miscellaneous/variables.html",[1438,2.039,1672,4.113]],["body/miscellaneous/variables.html",[9,0.308,23,0.015,25,0.645,28,2.7,34,2.505,36,1.35,37,2.342,48,4.083,55,1.835,67,3.273,69,0.973,73,0.009,74,0.009,105,2.945,139,3.473,140,3.273,163,2.599,187,3.247,232,1.947,241,3.505,257,4.083,262,4.537,353,5.06,436,2.713,437,3.727,438,4.024,526,4.124,527,4.641,690,3.247,938,4.083,1380,3.273,1381,3.273,1382,3.273,1397,3.273,1398,5.906,1399,5.906,1400,4.537,1401,4.537,1402,4.537,1403,4.537,1438,2.342,1672,3.273,1673,3.77,1674,3.77,1675,5.227,1676,3.77,1677,6.478,1678,3.77,1679,5.227,1680,3.77,1681,3.77,1682,3.77,1683,3.77,1684,3.77,1685,5.999,1686,6.478,1687,5.999,1688,5.999]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"interfaces/IGoogleUser.html":{},"interfaces/IUploadFile.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginatioQueryDto.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"classes/UpdatePostDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"classes/UpdateUserDto.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1373,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1669,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1418,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1434,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1436,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1417,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1374,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1386,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1378,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1379,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1383,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1384,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1387,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":348,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":819,"title":{},"body":{"classes/PaginatioQueryDto.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["1,2",{"_index":416,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1.1.26",{"_index":1407,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":816,"title":{},"body":{"classes/PaginatioQueryDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1409,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1414,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1411,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":868,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["10})@apiquery({name",{"_index":1256,"title":{},"body":{"controllers/UsersController.html":{}}}],["11.0.2",{"_index":1437,"title":{},"body":{"dependencies.html":{}}}],["1234",{"_index":626,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":624,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["128",{"_index":1122,"title":{},"body":{"entities/Upload.html":{}}}],["16",{"_index":1667,"title":{},"body":{"overview.html":{}}}],["16t07:46:32+0000",{"_index":415,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isdatestring()@isoptional",{"_index":349,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17",{"_index":1666,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":1425,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1668,"title":{},"body":{"overview.html":{}}}],["2.0.2",{"_index":1408,"title":{},"body":{"dependencies.html":{}}}],["2.0.5",{"_index":1412,"title":{},"body":{"dependencies.html":{}}}],["2.1691.0",{"_index":1415,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":922,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":904,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":347,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2525",{"_index":716,"title":{},"body":{"modules/MailModule.html":{}}}],["256",{"_index":876,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3",{"_index":1638,"title":{},"body":{"index.html":{}}}],["3.1.10",{"_index":1422,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":1410,"title":{},"body":{"dependencies.html":{}}}],["3001",{"_index":1658,"title":{},"body":{"index.html":{}}}],["4/9",{"_index":1389,"title":{},"body":{"coverage.html":{}}}],["44",{"_index":1388,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1665,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1416,"title":{},"body":{"dependencies.html":{}}}],["5.4.2",{"_index":1431,"title":{},"body":{"dependencies.html":{}}}],["512",{"_index":883,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6.9.16",{"_index":1427,"title":{},"body":{"dependencies.html":{}}}],["7.0.3",{"_index":1420,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1435,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1664,"title":{},"body":{"overview.html":{}}}],["8.0.1",{"_index":1413,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":1429,"title":{},"body":{"dependencies.html":{}}}],["88",{"_index":1358,"title":{},"body":{"injectables/UsersService.html":{}}}],["9",{"_index":365,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"overview.html":{}}}],["9.14.2",{"_index":1423,"title":{},"body":{"dependencies.html":{}}}],["96",{"_index":1218,"title":{},"body":{"entities/User.html":{}}}],["_",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["abrikos",{"_index":1361,"title":{},"body":{"injectables/UsersService.html":{}}}],["abstract",{"_index":687,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["access",{"_index":255,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["accessible",{"_index":1657,"title":{},"body":{"index.html":{}}}],["accesstoken",{"_index":1089,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["account",{"_index":1490,"title":{},"body":{"index.html":{}}}],["accounts",{"_index":1538,"title":{},"body":{"index.html":{}}}],["action",{"_index":597,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["activeuser",{"_index":938,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adapter",{"_index":724,"title":{},"body":{"modules/MailModule.html":{}}}],["add",{"_index":589,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"index.html":{}}}],["adding",{"_index":1497,"title":{},"body":{"index.html":{}}}],["allows",{"_index":1536,"title":{},"body":{"index.html":{}}}],["already",{"_index":492,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["alternative",{"_index":1552,"title":{},"body":{"index.html":{}}}],["alternatively",{"_index":1472,"title":{},"body":{"index.html":{}}}],["amazon",{"_index":1467,"title":{},"body":{"index.html":{}}}],["amount",{"_index":1544,"title":{},"body":{"index.html":{}}}],["api",{"_index":1258,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["api.git",{"_index":1593,"title":{},"body":{"index.html":{}}}],["api2",{"_index":1595,"title":{},"body":{"index.html":{}}}],["api_version",{"_index":1610,"title":{},"body":{"index.html":{}}}],["apiheader",{"_index":1178,"title":{},"body":{"controllers/UploadsController.html":{}}}],["apiheaders",{"_index":1179,"title":{},"body":{"controllers/UploadsController.html":{}}}],["apioperation",{"_index":932,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":902,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":308,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":428,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":361,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["apiproperty({enum",{"_index":338,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":384,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":295,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["apipropertyoptional",{"_index":387,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":430,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":424,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":426,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":1268,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":933,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apis",{"_index":1581,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":934,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":942,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":1272,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiversion",{"_index":518,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app",{"_index":1457,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["app.helper.ts",{"_index":1392,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["app.service",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":76,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appcreate",{"_index":1376,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["appcreate(app",{"_index":1455,"title":{},"body":{"miscellaneous/functions.html":{}}}],["application",{"_index":1274,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":1249,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":1510,"title":{},"body":{"index.html":{}}}],["apploaded",{"_index":1500,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":83,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":79,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":296,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["assert",{"_index":1087,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"classes/FirstMigration1731061477784.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/HandleDbErrorOptions.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["attached",{"_index":1494,"title":{},"body":{"index.html":{}}}],["audience",{"_index":1097,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["auth",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["auth.controller",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/access",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":257,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":160,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":631,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"index.html":{}}}],["authenticate(@body",{"_index":639,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(googletokendto",{"_index":632,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authentication",{"_index":630,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"index.html":{}}}],["authentication.controller",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["authentication.controller.ts",{"_index":628,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:15",{"_index":634,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":642,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:16",{"_index":646,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:25",{"_index":648,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:31",{"_index":647,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticationguard",{"_index":131,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":266,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":94,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":860,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{},"properties.html":{}}}],["authorid",{"_index":567,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["authorization",{"_index":1185,"title":{},"body":{"controllers/UploadsController.html":{},"index.html":{}}}],["authorized",{"_index":1484,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":183,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":258,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":261,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":246,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":262,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":267,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["available",{"_index":1477,"title":{},"body":{"index.html":{}}}],["await",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"classes/FirstMigration1731061477784.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1144,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{},"index.html":{}}}],["aws.provider",{"_index":1196,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["aws.provider.ts",{"_index":1132,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["aws.provider.ts:11",{"_index":1140,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:28",{"_index":1142,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:8",{"_index":1136,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws_access_key_id",{"_index":1622,"title":{},"body":{"index.html":{}}}],["aws_cloudfront_url",{"_index":1621,"title":{},"body":{"index.html":{}}}],["aws_public_bucket_name",{"_index":1619,"title":{},"body":{"index.html":{}}}],["aws_region",{"_index":1620,"title":{},"body":{"index.html":{}}}],["aws_secret_access_key",{"_index":1623,"title":{},"body":{"index.html":{}}}],["backend",{"_index":1462,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":478,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["badrequestexception('check",{"_index":990,"title":{},"body":{"injectables/PostsService.html":{}}}],["badrequestexception('mime",{"_index":1210,"title":{},"body":{"injectables/UploadsService.html":{}}}],["badrequestexception('user",{"_index":491,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["based",{"_index":1251,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["baseurl",{"_index":845,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":285,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":289,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":287,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":288,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":210,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1186,"title":{},"body":{"controllers/UploadsController.html":{},"miscellaneous/enumerations.html":{}}}],["before",{"_index":1496,"title":{},"body":{"index.html":{}}}],["blog",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/PostsController.html":{},"index.html":{}}}],["body",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapnestapp",{"_index":1393,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["branch",{"_index":1479,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1662,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1659,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1150,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"index.html":{}}}],["buffer",{"_index":279,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1506,"title":{},"body":{"index.html":{}}}],["built",{"_index":1469,"title":{},"body":{"index.html":{}}}],["business",{"_index":1331,"title":{},"body":{"injectables/UsersService.html":{}}}],["callhandler",{"_index":512,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["capacity",{"_index":1567,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":595,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":756,"title":{},"body":{"entities/MetaOption.html":{}}}],["catch",{"_index":499,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/PostsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["catch((e",{"_index":272,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["catch(e",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["cause",{"_index":1359,"title":{},"body":{"injectables/UsersService.html":{}}}],["cd",{"_index":1594,"title":{},"body":{"index.html":{}}}],["cdn",{"_index":1547,"title":{},"body":{"index.html":{}}}],["character",{"_index":461,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FirstMigration1731061477784.html":{}}}],["character'})@maxlength(96",{"_index":455,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["class",{"_index":51,"title":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginatioQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginatioQueryDto.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"classes/UpdatePostDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"classes/UpdateUserDto.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":291,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginatioQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":1263,"title":{},"body":{"controllers/UsersController.html":{}}}],["cli.config.ts",{"_index":1640,"title":{},"body":{"index.html":{}}}],["cli.sample.config.ts",{"_index":1642,"title":{},"body":{"index.html":{}}}],["clientid",{"_index":653,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":655,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clone",{"_index":1588,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1568,"title":{},"body":{"index.html":{}}}],["cloudfront",{"_index":1499,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":697,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":699,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":698,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":776,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_exports",{"_index":777,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":778,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":822,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":824,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":823,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":954,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":955,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":956,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1047,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1048,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1049,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule",{"_index":1191,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule_providers",{"_index":1192,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1318,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1320,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1319,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1585,"title":{},"body":{"index.html":{}}}],["column",{"_index":761,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["column({type",{"_index":750,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["common/interceptors/data",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pagination/pagination.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparepassword",{"_index":276,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":278,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["complete",{"_index":1311,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["compliance",{"_index":1517,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":1582,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":1406,"title":{},"body":{"dependencies.html":{}}}],["compute",{"_index":1566,"title":{},"body":{"index.html":{}}}],["config",{"_index":710,"title":{},"body":{"modules/MailModule.html":{},"miscellaneous/functions.html":{}}}],["config.get('appconfig.mailhost",{"_index":713,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.smtppassword",{"_index":719,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.smtpusername",{"_index":717,"title":{},"body":{"modules/MailModule.html":{}}}],["config/app.config",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{},"injectables/TokensProvider.html":{}}}],["configmodule",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":508,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"modules/MailModule.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"miscellaneous/functions.html":{}}}],["configservise",{"_index":1137,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/TokensProvider.html":{}}}],["conflictexception",{"_index":479,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":1310,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception(e",{"_index":503,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UploadsService.html":{}}}],["connect",{"_index":1302,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["connection",{"_index":1317,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["console",{"_index":1088,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["console.log('error",{"_index":273,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["console.log(e",{"_index":681,"title":{},"body":{"interfaces/HandleDbErrorOptions.html":{}}}],["const",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":545,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(request",{"_index":839,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(configservice",{"_index":507,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["constructor(configservise",{"_index":1135,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["constructor(datasource",{"_index":1292,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["constructor(jwtconfiguration",{"_index":645,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/TokensProvider.html":{}}}],["constructor(mailerservice",{"_index":729,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(metaoptionsrepository",{"_index":784,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["constructor(reflector",{"_index":249,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(request",{"_index":831,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(tagrepository",{"_index":1057,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(uploadsrepository",{"_index":1200,"title":{},"body":{"injectables/UploadsService.html":{}}}],["constructor(usersrepository",{"_index":467,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["consuming",{"_index":1579,"title":{},"body":{"index.html":{}}}],["containers",{"_index":1532,"title":{},"body":{"index.html":{}}}],["content",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{},"entities/Post.html":{},"controllers/UploadsController.html":{},"index.html":{}}}],["content'})@isstring()@isoptional",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["contenttype",{"_index":1154,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailService.html":{}}}],["context.getclass",{"_index":265,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":264,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":75,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('google",{"_index":637,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('meta",{"_index":773,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":941,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":1040,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('uploads",{"_index":1182,"title":{},"body":{"controllers/UploadsController.html":{}}}],["controller('users",{"_index":1271,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":77,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":1369,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":465,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["create(createtagdto",{"_index":1060,"title":{},"body":{"injectables/TagsService.html":{}}}],["create(createuserdto",{"_index":472,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["create(data",{"_index":968,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(metaoptiondto",{"_index":787,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["created",{"_index":906,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["createdat",{"_index":557,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"entities/Tag.html":{}}}],["createdate",{"_index":539,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"entities/MetaOption.html":{},"entities/Upload.html":{}}}],["createdatecolumn",{"_index":746,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["creategoogleuser",{"_index":466,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["creategoogleuser(googleuser",{"_index":474,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["createmany",{"_index":1291,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmany(createusersdto",{"_index":1295,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmanyusers",{"_index":1234,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":1285,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(users",{"_index":1238,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":290,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createmetaoption",{"_index":766,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoption(@body",{"_index":774,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoption(metaoptiondto",{"_index":767,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createparamdecorator",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":897,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":901,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost.dto",{"_index":1110,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["createpostdto",{"_index":311,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["createpostmetaoptions.dto",{"_index":1113,"title":{},"body":{"classes/UpdatePostMetaOptionsDto.html":{}}}],["createpostmetaoptionsdto",{"_index":332,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["createtag",{"_index":1026,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(@body",{"_index":1041,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(createtagdto",{"_index":1029,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtagdto",{"_index":422,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":1235,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(@body",{"_index":1282,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(user",{"_index":1242,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser.dto",{"_index":306,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/UpdateUserDto.html":{}}}],["createuserdto",{"_index":294,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":490,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":462,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["createusersdto",{"_index":1297,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createusersdto.users",{"_index":1303,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["cross",{"_index":1419,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":812,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":808,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data",{"_index":282,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"controllers/UploadsController.html":{},"index.html":{}}}],["data.tags.length",{"_index":988,"title":{},"body":{"injectables/PostsService.html":{}}}],["data.ts",{"_index":1399,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["database.'})@apiresponse({status",{"_index":921,"title":{},"body":{"controllers/PostsController.html":{}}}],["database.helper.ts",{"_index":1395,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["database_name",{"_index":1645,"title":{},"body":{"index.html":{}}}],["databases",{"_index":1525,"title":{},"body":{"index.html":{}}}],["dataresponseinterceptor",{"_index":133,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["datasource",{"_index":1293,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["date",{"_index":345,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["date().gettime().tostring().trim",{"_index":1163,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["dates",{"_index":1485,"title":{},"body":{"index.html":{}}}],["db_autoload=true",{"_index":1609,"title":{},"body":{"index.html":{}}}],["db_host=localhost",{"_index":1603,"title":{},"body":{"index.html":{}}}],["db_name",{"_index":1607,"title":{},"body":{"index.html":{}}}],["db_password",{"_index":1606,"title":{},"body":{"index.html":{}}}],["db_port=5432",{"_index":1604,"title":{},"body":{"index.html":{}}}],["db_sync=false",{"_index":1608,"title":{},"body":{"index.html":{}}}],["db_user",{"_index":1605,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginatioQueryDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/Upload.html":{},"controllers/UploadsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/auth.decorator",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["default",{"_index":526,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"modules/MailModule.html":{},"classes/PaginatioQueryDto.html":{},"entities/Post.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":248,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaultvaluepipe",{"_index":1264,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":1279,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":1277,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginatioQueryDto.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":594,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["delete('/:id",{"_index":910,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["delete('/soft",{"_index":1034,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(id",{"_index":970,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["delete/:id",{"_index":1035,"title":{},"body":{"controllers/TagsController.html":{}}}],["deleted",{"_index":985,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":559,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":1014,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":898,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@param('id",{"_index":952,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":909,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletetag",{"_index":1027,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(@param('id",{"_index":1043,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(id",{"_index":1031,"title":{},"body":{"controllers/TagsController.html":{}}}],["delivery",{"_index":1545,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":85,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployed",{"_index":1563,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1560,"title":{},"body":{"index.html":{}}}],["description",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetUsersParamDto.html":{},"interfaces/HandleDbErrorOptions.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["designing",{"_index":1577,"title":{},"body":{"index.html":{}}}],["dev",{"_index":1591,"title":{},"body":{"index.html":{}}}],["developing",{"_index":1528,"title":{},"body":{"index.html":{}}}],["development",{"_index":1502,"title":{},"body":{"index.html":{}}}],["developmet",{"_index":1600,"title":{},"body":{"index.html":{}}}],["different",{"_index":1463,"title":{},"body":{"index.html":{}}}],["dir",{"_index":721,"title":{},"body":{"modules/MailModule.html":{}}}],["distributes",{"_index":1548,"title":{},"body":{"index.html":{}}}],["docit",{"_index":1656,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1526,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1370,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documenting",{"_index":1578,"title":{},"body":{"index.html":{}}}],["documents",{"_index":1556,"title":{},"body":{"index.html":{}}}],["down",{"_index":524,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["down(queryrunner",{"_index":529,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["draft",{"_index":375,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{},"miscellaneous/enumerations.html":{}}}],["drop",{"_index":603,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["dropdatabase",{"_index":1396,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["dropdatabase(config",{"_index":1458,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dto/createmanyusers.dto",{"_index":1269,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["dto/createpost.dto",{"_index":935,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/createpostmetaoptions.dto",{"_index":772,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["dto/createtag.dto",{"_index":1039,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["dto/createuser.dto",{"_index":481,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/getposts.dto",{"_index":937,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/getusersparam.dto",{"_index":1265,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/googletoken.dto",{"_index":635,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dto/paginationquery.dto",{"_index":836,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dto/refreshtoken.dto",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TokensProvider.html":{}}}],["dto/signin.dto",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/updatepost.dto",{"_index":936,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/updatepostmetaoptions.dto",{"_index":794,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["dto/updateuser.dto",{"_index":1266,"title":{},"body":{"controllers/UsersController.html":{}}}],["e",{"_index":274,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/PostsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["e.tostring",{"_index":685,"title":{},"body":{"interfaces/HandleDbErrorOptions.html":{}}}],["each",{"_index":310,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":863,"title":{},"body":{"entities/Post.html":{}}}],["ec2",{"_index":1564,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1507,"title":{},"body":{"index.html":{}}}],["eight",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ejs",{"_index":1421,"title":{},"body":{"dependencies.html":{}}}],["ejsadapter",{"_index":707,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":436,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/FirstMigration1731061477784.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/IActiveUser.html":{},"interfaces/IGoogleUser.html":{},"injectables/MailService.html":{},"classes/SignInDto.html":{},"injectables/TokensProvider.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["encrypted",{"_index":280,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["end",{"_index":1654,"title":{},"body":{"index.html":{}}}],["enddate",{"_index":609,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["endopint",{"_index":1355,"title":{},"body":{"injectables/UsersService.html":{}}}],["endpoints",{"_index":1652,"title":{},"body":{"index.html":{}}}],["entities",{"_index":744,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":742,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":1253,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":404,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Upload.html":{}}}],["enum('draft",{"_index":566,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["enum('image",{"_index":576,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["enum('post",{"_index":564,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["enum/poststatus.enum",{"_index":398,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enum/posttype.enum",{"_index":399,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":1439,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/authtype.enum",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["enums/filetypes.enum",{"_index":696,"title":{},"body":{"interfaces/IUploadFile.html":{},"entities/Upload.html":{},"injectables/UploadsService.html":{}}}],["env",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development",{"_index":1599,"title":{},"body":{"index.html":{}}}],["env.test",{"_index":1631,"title":{},"body":{"index.html":{}}}],["envfilepath",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["environmentvalidation",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":355,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/TokensProvider.html":{},"injectables/UsersService.html":{}}}],["example",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exclude",{"_index":1229,"title":{},"body":{"entities/User.html":{}}}],["execute",{"_index":1633,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":493,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":920,"title":{},"body":{"controllers/PostsController.html":{}}}],["expandvariables",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["expiresin",{"_index":1082,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["export",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"interfaces/IGoogleUser.html":{},"interfaces/IUploadFile.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginatioQueryDto.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"classes/UpdatePostDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"classes/UpdateUserDto.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["exports:[paginationprovider",{"_index":828,"title":{},"body":{"modules/PaginationModule.html":{}}}],["express",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"controllers/UploadsController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1139,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["extends",{"_index":619,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"classes/UpdateUserDto.html":{}}}],["extensibility",{"_index":1516,"title":{},"body":{"index.html":{}}}],["extension",{"_index":1161,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["extractrequestfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["faker.internet.email",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.person.firstname",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.person.lastname",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["family_name",{"_index":665,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["featured",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimage",{"_index":555,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"entities/Tag.html":{}}}],["featuredimageurl",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/FirstMigration1731061477784.html":{},"entities/Post.html":{}}}],["features",{"_index":1482,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":1364,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["fetched",{"_index":1250,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":1247,"title":{},"body":{"controllers/UsersController.html":{}}}],["field",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"interfaces/IGoogleUser.html":{},"interfaces/IUploadFile.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginatioQueryDto.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"classes/UpdatePostDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"classes/UpdateUserDto.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["file.buffer",{"_index":1152,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.mimetype",{"_index":1155,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["file.originalname.split('.')[0",{"_index":1158,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.size",{"_index":1214,"title":{},"body":{"injectables/UploadsService.html":{}}}],["fileinterceptor",{"_index":1176,"title":{},"body":{"controllers/UploadsController.html":{}}}],["filename",{"_index":1157,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["filename.replace(/\\s/g",{"_index":1159,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["files",{"_index":1464,"title":{},"body":{"index.html":{}}}],["filetypes",{"_index":695,"title":{},"body":{"interfaces/IUploadFile.html":{},"entities/Upload.html":{},"injectables/UploadsService.html":{},"miscellaneous/enumerations.html":{}}}],["filetypes.image",{"_index":1129,"title":{},"body":{"entities/Upload.html":{},"injectables/UploadsService.html":{}}}],["fileupload",{"_index":1133,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["fileupload(file",{"_index":1138,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["finally",{"_index":1314,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["finalresponse",{"_index":853,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["findall",{"_index":964,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":1342,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":972,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmultipletags",{"_index":1055,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":1063,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyemail",{"_index":1333,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":1345,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebygoogleid",{"_index":1334,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebygoogleid(googleid",{"_index":1347,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":1335,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":1349,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":810,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstmigration.ts",{"_index":522,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"coverage.html":{}}}],["firstmigration.ts:24",{"_index":531,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["firstmigration.ts:4",{"_index":528,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["firstmigration.ts:6",{"_index":533,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["firstmigration1731061477784",{"_index":520,"title":{"classes/FirstMigration1731061477784.html":{}},"body":{"classes/FirstMigration1731061477784.html":{},"coverage.html":{}}}],["firstname",{"_index":437,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FirstMigration1731061477784.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/IGoogleUser.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["fk_41e7626b9cc03c5c65812ae55e8",{"_index":601,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["fk_b492d76365f19dffc4d60a7f863",{"_index":590,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["fk_b651178cc41334544a7a9601c45",{"_index":600,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["fk_c6fb082a3114f35d0cc27c518e0",{"_index":598,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["flexibility",{"_index":1554,"title":{},"body":{"index.html":{}}}],["fn",{"_index":679,"title":{},"body":{"interfaces/HandleDbErrorOptions.html":{},"miscellaneous/functions.html":{}}}],["focus",{"_index":1573,"title":{},"body":{"index.html":{}}}],["foreign",{"_index":591,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["forwardref",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/TokensProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":1002,"title":{},"body":{"injectables/PostsService.html":{}}}],["framework",{"_index":1505,"title":{},"body":{"index.html":{}}}],["fullstack/nest",{"_index":1592,"title":{},"body":{"index.html":{}}}],["function",{"_index":678,"title":{},"body":{"interfaces/HandleDbErrorOptions.html":{},"coverage.html":{}}}],["functions",{"_index":1449,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":1636,"title":{},"body":{"index.html":{}}}],["generatefilename",{"_index":1134,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatefilename(file",{"_index":1141,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generates",{"_index":1584,"title":{},"body":{"index.html":{}}}],["generatetokens",{"_index":1075,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["generatetokens(user",{"_index":1078,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["get('/:id",{"_index":1273,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":1246,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":914,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":156,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":899,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":912,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostsbasedto",{"_index":607,"title":{"classes/GetPostsBaseDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"coverage.html":{}}}],["getpostsdto",{"_index":618,"title":{"classes/GetPostsDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["getting",{"_index":1460,"title":{"index.html":{}},"body":{}}],["getuserparams",{"_index":1260,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers",{"_index":1236,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparams",{"_index":1245,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":621,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["git",{"_index":1589,"title":{},"body":{"index.html":{}}}],["given_name",{"_index":664,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["global",{"_index":701,"title":{},"body":{"modules/MailModule.html":{}}}],["globally",{"_index":1549,"title":{},"body":{"index.html":{}}}],["google",{"_index":629,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{},"index.html":{}}}],["google_client_id",{"_index":1617,"title":{},"body":{"index.html":{}}}],["google_client_secret",{"_index":1618,"title":{},"body":{"index.html":{}}}],["googleauthenticationcontroller",{"_index":205,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":202,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["googleauthservice",{"_index":638,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["googleid",{"_index":571,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/IGoogleUser.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["googletokendto",{"_index":633,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":662,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleuser",{"_index":477,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["handledberror",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["handledberror(fn",{"_index":1459,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handledberroroptions",{"_index":675,"title":{"interfaces/HandleDbErrorOptions.html":{}},"body":{"interfaces/HandleDbErrorOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["hashing.provider",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{}}}],["hashingprovider",{"_index":201,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":277,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":283,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hello",{"_index":158,"title":{},"body":{"injectables/AppService.html":{}}}],["host",{"_index":712,"title":{},"body":{"modules/MailModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":413,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@isurl()@maxlength(1024",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost:3000",{"_index":741,"title":{},"body":{"injectables/MailService.html":{},"index.html":{}}}],["httpcode",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":1352,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://github.com/olha",{"_index":1590,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":357,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":411,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.moved_permanently",{"_index":1354,"title":{},"body":{"injectables/UsersService.html":{}}}],["iactiveuser",{"_index":690,"title":{"interfaces/IActiveUser.html":{}},"body":{"interfaces/IActiveUser.html":{},"controllers/PostsController.html":{},"injectables/TokensProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":537,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1371,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":381,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["idtoken",{"_index":661,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["idx_41e7626b9cc03c5c65812ae55e",{"_index":587,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["idx_b651178cc41334544a7a9601c4",{"_index":586,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["if(!token",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["igoogleuser",{"_index":475,"title":{"interfaces/IGoogleUser.html":{}},"body":{"injectables/CreateUserProvider.html":{},"interfaces/IGoogleUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["image",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{},"controllers/UploadsController.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["image/gif",{"_index":1206,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpeg",{"_index":1207,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpg",{"_index":1208,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/png'].includes",{"_index":1209,"title":{},"body":{"injectables/UploadsService.html":{}}}],["images",{"_index":1465,"title":{},"body":{"index.html":{}}}],["implemented",{"_index":1480,"title":{},"body":{"index.html":{}}}],["implements",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["import",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/HashingProvider.html":{},"interfaces/IUploadFile.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginatioQueryDto.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"classes/UpdatePostDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"classes/UpdateUserDto.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}}}],["in')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(tags",{"_index":1071,"title":{},"body":{"injectables/TagsService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"interfaces/IGoogleUser.html":{},"interfaces/IUploadFile.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginatioQueryDto.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":1456,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"interfaces/IGoogleUser.html":{},"interfaces/IUploadFile.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginatioQueryDto.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"classes/UpdatePostDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"classes/UpdateUserDto.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/PaginationProvider.html":{},"injectables/TokensProvider.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/TokensProvider.html":{}}}],["inject(jwtconfig.key",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/TokensProvider.html":{}}}],["injectable",{"_index":40,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":154,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":1337,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository",{"_index":482,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":795,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["injectrepository(post",{"_index":981,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":1067,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(upload",{"_index":1205,"title":{},"body":{"injectables/UploadsService.html":{}}}],["injectrepository(user",{"_index":488,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["inlinecssenabled",{"_index":725,"title":{},"body":{"modules/MailModule.html":{}}}],["insert",{"_index":893,"title":{},"body":{"entities/Post.html":{}}}],["install",{"_index":1596,"title":{},"body":{"index.html":{}}}],["install3",{"_index":1598,"title":{},"body":{"index.html":{}}}],["instance",{"_index":269,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instance.canactivate(context",{"_index":271,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["integer",{"_index":544,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["integration",{"_index":1572,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":506,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":510,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":674,"title":{"interfaces/HandleDbErrorOptions.html":{},"interfaces/IActiveUser.html":{},"interfaces/IGoogleUser.html":{},"interfaces/IUploadFile.html":{},"interfaces/Paginated.html":{}},"body":{"interfaces/HandleDbErrorOptions.html":{},"interfaces/IActiveUser.html":{},"interfaces/IGoogleUser.html":{},"interfaces/IUploadFile.html":{},"interfaces/Paginated.html":{},"coverage.html":{}}}],["interfaces",{"_index":676,"title":{},"body":{"interfaces/HandleDbErrorOptions.html":{},"interfaces/IActiveUser.html":{},"interfaces/IGoogleUser.html":{},"interfaces/IUploadFile.html":{},"interfaces/Paginated.html":{},"overview.html":{}}}],["interfaces/activeuser.interface",{"_index":1085,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["interfaces/googleuser.interface",{"_index":486,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["interfaces/paginated.interface",{"_index":838,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["interfaces/uploadfile.interface",{"_index":1204,"title":{},"body":{"injectables/UploadsService.html":{}}}],["intersectiontype",{"_index":614,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["intersectiontype(getpostsbasedto",{"_index":620,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["isarray",{"_index":302,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isdate",{"_index":615,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["isdate()@isoptional",{"_index":611,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["isdatestring",{"_index":388,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":457,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty",{"_index":1009,"title":{},"body":{"classes/SignInDto.html":{}}}],["isenum",{"_index":389,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":409,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":406,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isequal",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["isglobal",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":390,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isjson",{"_index":391,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{}}}],["isnotempty",{"_index":303,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{}}}],["isnotempty()@isemail()@maxlength(96",{"_index":439,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isjson",{"_index":420,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isnotempty()@isstring",{"_index":1006,"title":{},"body":{"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isolated",{"_index":1531,"title":{},"body":{"index.html":{}}}],["isoptional",{"_index":392,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginatioQueryDto.html":{}}}],["isoptional()@isjson",{"_index":359,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@ispositive",{"_index":817,"title":{},"body":{"classes/PaginatioQueryDto.html":{}}}],["ispositive",{"_index":821,"title":{},"body":{"classes/PaginatioQueryDto.html":{}}}],["isstring",{"_index":393,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty",{"_index":672,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":441,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issuer",{"_index":1099,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["isurl",{"_index":394,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":298,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["itemsperpage",{"_index":806,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["iuploadfile",{"_index":693,"title":{"interfaces/IUploadFile.html":{}},"body":{"interfaces/IUploadFile.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["javascript",{"_index":1523,"title":{},"body":{"index.html":{}}}],["jest",{"_index":1570,"title":{},"body":{"index.html":{}}}],["joi",{"_index":1424,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":706,"title":{},"body":{"modules/MailModule.html":{}}}],["join(__dirname",{"_index":722,"title":{},"body":{"modules/MailModule.html":{}}}],["joincolumn",{"_index":762,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":885,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":352,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{},"entities/MetaOption.html":{},"index.html":{}}}],["jwt",{"_index":1481,"title":{},"body":{"index.html":{}}}],["jwt_access_token_ttl=3600",{"_index":1615,"title":{},"body":{"index.html":{}}}],["jwt_refresh_token_ttl=86400",{"_index":1616,"title":{},"body":{"index.html":{}}}],["jwt_secret",{"_index":1612,"title":{},"body":{"index.html":{}}}],["jwt_token_audience=localhost:3000",{"_index":1613,"title":{},"body":{"index.html":{}}}],["jwt_token_issuer=localhost:3000",{"_index":1614,"title":{},"body":{"index.html":{}}}],["jwtconfig",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/TokensProvider.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/TokensProvider.html":{}}}],["jwtmodule",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/TokensProvider.html":{}}}],["key",{"_index":550,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"injectables/UploadToAwsProvider.html":{}}}],["keyof",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["known",{"_index":1514,"title":{},"body":{"index.html":{}}}],["last",{"_index":811,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FirstMigration1731061477784.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/IGoogleUser.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["latency",{"_index":1551,"title":{},"body":{"index.html":{}}}],["legend",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":867,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["letter",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":368,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["library",{"_index":651,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{},"index.html":{}}}],["license",{"_index":1670,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":815,"title":{},"body":{"classes/PaginatioQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linenumber",{"_index":1357,"title":{},"body":{"injectables/UsersService.html":{}}}],["links",{"_index":803,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":1248,"title":{},"body":{"controllers/UsersController.html":{}}}],["literal",{"_index":805,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1534,"title":{},"body":{"index.html":{}}}],["localy",{"_index":1587,"title":{},"body":{"index.html":{}}}],["login",{"_index":1537,"title":{},"body":{"index.html":{}}}],["loginticket",{"_index":659,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":666,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginurl",{"_index":740,"title":{},"body":{"injectables/MailService.html":{}}}],["low",{"_index":1550,"title":{},"body":{"index.html":{}}}],["machine",{"_index":1535,"title":{},"body":{"index.html":{}}}],["mail/mail.module",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["mail_host",{"_index":1624,"title":{},"body":{"index.html":{}}}],["mailermodule",{"_index":703,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":709,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":730,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":95,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":469,"title":{"injectables/MailService.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["management",{"_index":1483,"title":{},"body":{"index.html":{}}}],["manager",{"_index":1561,"title":{},"body":{"index.html":{}}}],["many",{"_index":1284,"title":{},"body":{"controllers/UsersController.html":{}}}],["many')@auth(authtype.none",{"_index":1240,"title":{},"body":{"controllers/UsersController.html":{}}}],["many.provider",{"_index":1325,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["many.provider.ts",{"_index":1290,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:12",{"_index":1294,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many.provider.ts:15",{"_index":1296,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["manytomany",{"_index":886,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":879,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":887,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":861,"title":{},"body":{"entities/Post.html":{}}}],["map",{"_index":515,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((data",{"_index":517,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["mapping",{"_index":1520,"title":{},"body":{"index.html":{}}}],["matches",{"_index":395,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":460,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":407,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"interfaces/IGoogleUser.html":{},"interfaces/IUploadFile.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginatioQueryDto.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"classes/UpdatePostDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"classes/UpdateUserDto.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(paginationquery.limit",{"_index":850,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["maxlength",{"_index":396,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{}}}],["maxlength(1024",{"_index":414,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":408,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":403,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":458,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":366,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["meta",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"index.html":{}}}],["meta_option",{"_index":536,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["metadata",{"_index":1433,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":743,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["metaoption.entity",{"_index":781,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["metaoption.metavalue",{"_index":799,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptiondto",{"_index":769,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["metaoptions",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["metaoptions.controller",{"_index":780,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["metaoptions.post",{"_index":871,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":764,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":96,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":786,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptionsservice",{"_index":770,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["metaotionid",{"_index":793,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metavalue",{"_index":417,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/FirstMigration1731061477784.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":1344,"title":{},"body":{"injectables/UsersService.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["migration:run5",{"_index":1647,"title":{},"body":{"index.html":{}}}],["migrationinterface",{"_index":523,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["migrations",{"_index":1646,"title":{},"body":{"index.html":{}}}],["mime",{"_index":579,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"interfaces/IUploadFile.html":{},"entities/Upload.html":{},"injectables/UploadsService.html":{}}}],["minimum",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":397,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":434,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":402,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":459,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1438,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1601,"title":{},"body":{"index.html":{}}}],["modeling",{"_index":1557,"title":{},"body":{"index.html":{}}}],["module",{"_index":82,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":84,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":705,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":708,"title":{},"body":{"modules/MailModule.html":{}}}],["mongo_db_connection_string",{"_index":1630,"title":{},"body":{"index.html":{}}}],["mongo_db_name",{"_index":1629,"title":{},"body":{"index.html":{}}}],["mongo_db_password",{"_index":1628,"title":{},"body":{"index.html":{}}}],["mongo_db_username",{"_index":1627,"title":{},"body":{"index.html":{}}}],["mongodb",{"_index":1475,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":1476,"title":{},"body":{"index.html":{}}}],["multipart/form",{"_index":1184,"title":{},"body":{"controllers/UploadsController.html":{}}}],["multiple",{"_index":1492,"title":{},"body":{"index.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"interfaces/IUploadFile.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":1391,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestinterceptor",{"_index":514,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":704,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/TokensProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1117,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1177,"title":{},"body":{"controllers/UploadsController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":309,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"classes/UpdatePostDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["network",{"_index":1546,"title":{},"body":{"index.html":{}}}],["new",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/HandleDbErrorOptions.html":{},"modules/MailModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newmetaoptions",{"_index":995,"title":{},"body":{"injectables/PostsService.html":{}}}],["newurl",{"_index":847,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${nextpage",{"_index":857,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${paginationquery.page",{"_index":856,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${previouspage",{"_index":858,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${totalpages",{"_index":855,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=1",{"_index":854,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":494,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["newusers",{"_index":1298,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":1307,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["next",{"_index":511,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"index.html":{}}}],["next.handle().pipe",{"_index":516,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nextpage",{"_index":851,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1504,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1426,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":1445,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["nosql",{"_index":1553,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":976,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('tags",{"_index":1001,"title":{},"body":{"injectables/PostsService.html":{}}}],["now",{"_index":541,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["npm",{"_index":1597,"title":{},"body":{"index.html":{}}}],["null",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{}}}],["nullable",{"_index":751,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["number",{"_index":380,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/IActiveUser.html":{},"interfaces/IUploadFile.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginatioQueryDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"entities/Upload.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["oauth2client",{"_index":650,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client(clientid",{"_index":658,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":643,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":353,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.assign(post",{"_index":1003,"title":{},"body":{"injectables/PostsService.html":{}}}],["objectliteral",{"_index":837,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":253,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["occured",{"_index":1360,"title":{},"body":{"injectables/UsersService.html":{}}}],["odm",{"_index":1558,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":755,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":452,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{}}}],["onetomany",{"_index":1230,"title":{},"body":{"entities/User.html":{}}}],["onetomany(()=>post",{"_index":1231,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1226,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":763,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":753,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onmoduleinit",{"_index":644,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["opearations",{"_index":1332,"title":{},"body":{"injectables/UsersService.html":{}}}],["open",{"_index":1512,"title":{},"body":{"index.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PaginatioQueryDto.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":680,"title":{},"body":{"interfaces/HandleDbErrorOptions.html":{},"modules/MailModule.html":{},"controllers/MetaOptionsController.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["options/dto/createpostmetaoptions.dto",{"_index":401,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["options/dto/createpostmetaoptions.dto.ts",{"_index":419,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/dto/createpostmetaoptions.dto.ts:6",{"_index":421,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options/dto/updatepostmetaoptions.dto.ts",{"_index":1111,"title":{},"body":{"classes/UpdatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/metaoption.entity",{"_index":888,"title":{},"body":{"entities/Post.html":{},"modules/PostsModule.html":{}}}],["options/metaoption.entity.ts",{"_index":745,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["options/metaoption.entity.ts:15",{"_index":749,"title":{},"body":{"entities/MetaOption.html":{}}}],["options/metaoption.entity.ts:21",{"_index":752,"title":{},"body":{"entities/MetaOption.html":{}}}],["options/metaoption.entity.ts:24",{"_index":747,"title":{},"body":{"entities/MetaOption.html":{}}}],["options/metaoption.entity.ts:27",{"_index":759,"title":{},"body":{"entities/MetaOption.html":{}}}],["options/metaoption.entity.ts:33",{"_index":757,"title":{},"body":{"entities/MetaOption.html":{}}}],["options/metaoptions.controller.ts",{"_index":765,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options/metaoptions.controller.ts:10",{"_index":768,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options/metaoptions.module",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{}}}],["options/metaoptions.module.ts",{"_index":779,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options/providers/metaoptions.service",{"_index":978,"title":{},"body":{"injectables/PostsService.html":{}}}],["options/providers/metaoptions.service.ts",{"_index":783,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options/providers/metaoptions.service.ts:15",{"_index":788,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/providers/metaoptions.service.ts:20",{"_index":792,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/providers/metaoptions.service.ts:9",{"_index":785,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["orm",{"_index":1521,"title":{},"body":{"index.html":{}}}],["out",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1663,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1405,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":341,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{},"classes/PaginatioQueryDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":801,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{},"index.html":{}}}],["paginatequery",{"_index":830,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":833,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationmodule",{"_index":97,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":825,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":835,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":843,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":842,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatioquerydto",{"_index":616,"title":{"classes/PaginatioQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/PaginatioQueryDto.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["param",{"_index":927,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":950,"title":{},"body":{"controllers/PostsController.html":{}}}],["param('userid",{"_index":943,"title":{},"body":{"controllers/PostsController.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parseintpipe",{"_index":1037,"title":{},"body":{"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["partialtype",{"_index":1109,"title":{},"body":{"classes/UpdatePostDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createpostdto",{"_index":1108,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["partialtype(createpostmetaoptionsdto",{"_index":1112,"title":{},"body":{"classes/UpdatePostMetaOptionsDto.html":{}}}],["partialtype(createuserdto",{"_index":1116,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pass",{"_index":718,"title":{},"body":{"modules/MailModule.html":{}}}],["password",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/FirstMigration1731061477784.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["password123",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwords",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":928,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch('/:id",{"_index":949,"title":{},"body":{"controllers/PostsController.html":{}}}],["path",{"_index":578,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"interfaces/IUploadFile.html":{},"modules/MailModule.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["path.extname(file.originalname",{"_index":1162,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["payload",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/TokensProvider.html":{}}}],["per",{"_index":1255,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":1330,"title":{},"body":{"injectables/UsersService.html":{}}}],["person",{"_index":358,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":412,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1428,"title":{},"body":{"dependencies.html":{}}}],["pk_1fe8db121b3de4ddfa677fc51f3",{"_index":582,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["pk_59e834d6ba39bd9bd7c99b8805d",{"_index":548,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["pk_8e4052373c579afc1471f526760",{"_index":562,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["pk_be5fda3aac270b134ff9c21cdee",{"_index":569,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["pk_cace4a159ff9f2512dd42373760",{"_index":574,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["pk_e9b7b8e6a07bdccb6a954171676",{"_index":585,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["platform",{"_index":1527,"title":{},"body":{"index.html":{}}}],["pm2",{"_index":1430,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["port",{"_index":715,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["possibility",{"_index":1498,"title":{},"body":{"index.html":{}}}],["possible",{"_index":339,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":182,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{},"controllers/GoogleAuthenticationController.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["post\"(\"id",{"_index":593,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["post'})@apiresponse({status",{"_index":903,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":363,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":385,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post('/create",{"_index":1239,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/refresh",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/sign",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('file",{"_index":1188,"title":{},"body":{"controllers/UploadsController.html":{}}}],["post()@auth(authtype.none)@useinterceptors(classserializerinterceptor",{"_index":1243,"title":{},"body":{"controllers/UsersController.html":{}}}],["post.author",{"_index":1227,"title":{},"body":{"entities/User.html":{}}}],["post.entity",{"_index":959,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":754,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PostsService.html":{}}}],["post.metaoptions.id",{"_index":997,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":1000,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post_tags_tag",{"_index":583,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["postgesql",{"_index":1471,"title":{},"body":{"index.html":{}}}],["postgresql",{"_index":1511,"title":{},"body":{"index.html":{}}}],["postid",{"_index":543,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["postquery",{"_index":913,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts",{"_index":896,"title":{},"body":{"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{},"index.html":{}}}],["posts.controller",{"_index":958,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":894,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":98,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":966,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":930,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":374,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":891,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":890,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["previous",{"_index":813,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["previouspage",{"_index":852,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primary",{"_index":549,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["primarygeneratedcolumn",{"_index":748,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":684,"title":{},"body":{"interfaces/HandleDbErrorOptions.html":{},"index.html":{}}}],["process.env.node_env",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1635,"title":{},"body":{"index.html":{}}}],["profile_api_key",{"_index":1611,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1503,"title":{},"body":{"index.html":{}}}],["project",{"_index":1468,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/FirstMigration1731061477784.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/UploadToAwsProvider.html":{},"miscellaneous/functions.html":{}}}],["promise.all",{"_index":1090,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["promise.resolve",{"_index":270,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["properties",{"_index":245,"title":{"properties.html":{}},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/HandleDbErrorOptions.html":{},"interfaces/IActiveUser.html":{},"interfaces/IGoogleUser.html":{},"interfaces/IUploadFile.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginatioQueryDto.html":{},"entities/Post.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"index.html":{},"properties.html":{}}}],["property",{"_index":1493,"title":{},"body":{"index.html":{}}}],["provide",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["providers",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt.provider",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/create",{"_index":1326,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/google",{"_index":636,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["providers/hashing.provider",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/mail.service",{"_index":702,"title":{},"body":{"modules/MailModule.html":{}}}],["providers/metaoptions.service",{"_index":771,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/pagination.provider",{"_index":827,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/posts.service",{"_index":931,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":1038,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/tokens.provider",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/upload",{"_index":1195,"title":{},"body":{"modules/UploadsModule.html":{}}}],["providers/uploads.service",{"_index":1181,"title":{},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{}}}],["providers/users",{"_index":1324,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/users.service",{"_index":1267,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["providing",{"_index":1559,"title":{},"body":{"index.html":{}}}],["public",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"classes/FirstMigration1731061477784.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["public\".\"idx_41e7626b9cc03c5c65812ae55e",{"_index":605,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["public\".\"idx_b651178cc41334544a7a9601c4",{"_index":606,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["public\".\"post_posttype_enum",{"_index":563,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["public\".\"post_status_enum",{"_index":565,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["public\".\"upload_type_enum",{"_index":575,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["published",{"_index":346,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":378,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{},"entities/Post.html":{}}}],["query",{"_index":929,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":1252,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":1276,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":1278,"title":{},"body":{"controllers/UsersController.html":{}}}],["queryrunner",{"_index":530,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":1308,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":1300,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":1304,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.save(newuser",{"_index":1306,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.query(`alter",{"_index":588,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["queryrunner.query(`create",{"_index":534,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["queryrunner.query(`drop",{"_index":604,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["queryrunner.release",{"_index":1315,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1309,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":1301,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["r\\n",{"_index":410,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["range",{"_index":1486,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["receives",{"_index":1488,"title":{},"body":{"index.html":{}}}],["record",{"_index":259,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["references",{"_index":592,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["reflect",{"_index":1432,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":250,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refresh",{"_index":1489,"title":{},"body":{"index.html":{}}}],["refreshtoken",{"_index":1005,"title":{},"body":{"classes/RefreshTokenDto.html":{},"injectables/TokensProvider.html":{}}}],["refreshtokendto",{"_index":168,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/TokensProvider.html":{},"coverage.html":{}}}],["refreshtokendto.refreshtoken",{"_index":1104,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["refreshtokens",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TokensProvider.html":{}}}],["refreshtokens(@body",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(refreshtokendto",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TokensProvider.html":{}}}],["refreshtokens(refreshtokensdto",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokensdto",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["rel_b492d76365f19dffc4d60a7f86",{"_index":546,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["relational",{"_index":1513,"title":{},"body":{"index.html":{}}}],["release",{"_index":1316,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["remove",{"_index":892,"title":{},"body":{"entities/Post.html":{}}}],["repository",{"_index":468,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repository.count",{"_index":849,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":840,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/PaginationProvider.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":480,"title":{},"body":{"injectables/CreateUserProvider.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/PostsService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["requesttimeoutexception(e",{"_index":500,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UploadToAwsProvider.html":{}}}],["requesttimeoutexception(message",{"_index":682,"title":{},"body":{"interfaces/HandleDbErrorOptions.html":{}}}],["required",{"_index":297,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resizable",{"_index":1565,"title":{},"body":{"index.html":{}}}],["response",{"_index":905,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["response.interceptor",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":505,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:11",{"_index":509,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:13",{"_index":513,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["restful",{"_index":1580,"title":{},"body":{"index.html":{}}}],["result",{"_index":1305,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["results",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"interfaces/IGoogleUser.html":{},"interfaces/IUploadFile.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginatioQueryDto.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"classes/UpdatePostDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"classes/UpdateUserDto.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieving",{"_index":1543,"title":{},"body":{"index.html":{}}}],["return",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/HandleDbErrorOptions.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1254,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":377,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{},"miscellaneous/enumerations.html":{}}}],["robustness",{"_index":1515,"title":{},"body":{"index.html":{}}}],["run",{"_index":1586,"title":{},"body":{"index.html":{}}}],["running",{"_index":1530,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":254,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["s3",{"_index":1143,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"index.html":{}}}],["salt",{"_index":286,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["samplecompleteuser",{"_index":1400,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["samplemissingemailuser",{"_index":1401,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["samplemissingfirstnameuser",{"_index":1402,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["samplemissingpassworduser",{"_index":1403,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["saved",{"_index":1466,"title":{},"body":{"index.html":{}}}],["scalability",{"_index":1555,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":1508,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":376,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/FirstMigration1731061477784.html":{},"entities/Post.html":{},"entities/Tag.html":{},"index.html":{}}}],["sdk",{"_index":1145,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["secret",{"_index":1101,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["secure",{"_index":714,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["senduserwelcome",{"_index":728,"title":{},"body":{"injectables/MailService.html":{}}}],["senduserwelcome(user",{"_index":732,"title":{},"body":{"injectables/MailService.html":{}}}],["separate",{"_index":1478,"title":{},"body":{"index.html":{}}}],["separately",{"_index":1495,"title":{},"body":{"index.html":{}}}],["serial",{"_index":538,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["serialize",{"_index":351,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":405,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":343,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":1187,"title":{},"body":{"controllers/UploadsController.html":{},"index.html":{}}}],["server'})@post('file",{"_index":1172,"title":{},"body":{"controllers/UploadsController.html":{}}}],["service",{"_index":1338,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["services",{"_index":1541,"title":{},"body":{"index.html":{}}}],["set",{"_index":1643,"title":{},"body":{"index.html":{}}}],["setmetadata(auth_type_key",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1639,"title":{},"body":{"index.html":{}}}],["shipping",{"_index":1529,"title":{},"body":{"index.html":{}}}],["side",{"_index":1509,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":418,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["signin",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signindto",{"_index":175,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signing",{"_index":1487,"title":{},"body":{"index.html":{}}}],["signtoken",{"_index":1076,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["signtoken(userid",{"_index":1081,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["similarly",{"_index":1637,"title":{},"body":{"index.html":{}}}],["similatr",{"_index":1632,"title":{},"body":{"index.html":{}}}],["simplicity",{"_index":1574,"title":{},"body":{"index.html":{}}}],["simplified",{"_index":1473,"title":{},"body":{"index.html":{}}}],["simplifies",{"_index":1562,"title":{},"body":{"index.html":{}}}],["single",{"_index":1491,"title":{},"body":{"index.html":{}}}],["size",{"_index":581,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"interfaces/IUploadFile.html":{},"entities/Upload.html":{},"injectables/UploadsService.html":{}}}],["skip",{"_index":841,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["slug",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/FirstMigration1731061477784.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":367,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["smtp_password",{"_index":1626,"title":{},"body":{"index.html":{}}}],["smtp_username",{"_index":1625,"title":{},"body":{"index.html":{}}}],["social/google",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["softdelete",{"_index":1056,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdelete(id",{"_index":1065,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdeletetag",{"_index":1028,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(@param('id",{"_index":1045,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(id",{"_index":1033,"title":{},"body":{"controllers/TagsController.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"interfaces/IGoogleUser.html":{},"interfaces/IUploadFile.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginatioQueryDto.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"classes/UpdatePostDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"classes/UpdateUserDto.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":371,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["spec.sample",{"_index":1398,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["special",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{}}}],["specifec",{"_index":1351,"title":{},"body":{"injectables/UsersService.html":{}}}],["specific",{"_index":623,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sql",{"_index":1518,"title":{},"body":{"index.html":{}}}],["src/.../activeuser.decorator.ts",{"_index":1673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.create.ts",{"_index":1450,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../app.module.ts",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.constants.ts",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authtype.enum.ts",{"_index":1440,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../exception.util.ts",{"_index":1454,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../filetypes.enum.ts",{"_index":1441,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1451,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":1442,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":1443,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":78,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.create.ts",{"_index":1375,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":155,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":157,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:15",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:22",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1323,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["src/auth/constants/auth.constants",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["src/auth/constants/auth.constants.ts",{"_index":1380,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/activeuser.decorator",{"_index":939,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/auth/decorators/activeuser.decorator.ts",{"_index":1381,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":1270,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1382,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/refreshtoken.dto.ts",{"_index":1004,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dto/refreshtoken.dto.ts:6",{"_index":1007,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["src/auth/dto/signin.dto.ts",{"_index":1008,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dto/signin.dto.ts:10",{"_index":1011,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dto/signin.dto.ts:6",{"_index":1010,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/enums/authtype.enum",{"_index":256,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{}}}],["src/auth/enums/authtype.enum.ts",{"_index":1444,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":244,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:23",{"_index":251,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:29",{"_index":252,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/interfaces/activeuser.interface",{"_index":940,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/auth/interfaces/activeuser.interface.ts",{"_index":691,"title":{},"body":{"interfaces/IActiveUser.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service",{"_index":1353,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:15",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:23",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:37",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":275,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:11",{"_index":281,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:7",{"_index":284,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/hashing.provider",{"_index":485,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":686,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:5",{"_index":689,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:6",{"_index":688,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/tokens.provider",{"_index":652,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["src/auth/providers/tokens.provider.ts",{"_index":1074,"title":{},"body":{"injectables/TokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/tokens.provider.ts:18",{"_index":1077,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["src/auth/providers/tokens.provider.ts:27",{"_index":1079,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["src/auth/providers/tokens.provider.ts:44",{"_index":1083,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["src/auth/providers/tokens.provider.ts:59",{"_index":1080,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["src/auth/social/dto/googletoken.dto.ts",{"_index":671,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/dto/googletoken.dto.ts:6",{"_index":673,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["src/auth/social/google",{"_index":627,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":641,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/common/interceptors/data",{"_index":504,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination/dto/paginationquery.dto",{"_index":617,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["src/common/pagination/dto/paginationquery.dto.ts",{"_index":814,"title":{},"body":{"classes/PaginatioQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/dto/paginationquery.dto.ts:10",{"_index":820,"title":{},"body":{"classes/PaginatioQueryDto.html":{}}}],["src/common/pagination/dto/paginationquery.dto.ts:7",{"_index":818,"title":{},"body":{"classes/PaginatioQueryDto.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":980,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":802,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":961,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":826,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":979,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":829,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:12",{"_index":834,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:9",{"_index":832,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/utils/exception.util",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["src/common/utils/exception.util.ts",{"_index":677,"title":{},"body":{"interfaces/HandleDbErrorOptions.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/mail/mail.module.ts",{"_index":700,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/providers/mail.service",{"_index":487,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/mail/providers/mail.service.ts",{"_index":727,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/providers/mail.service.ts:6",{"_index":731,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/providers/mail.service.ts:9",{"_index":733,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":1385,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":400,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/migrations/1731061477784",{"_index":521,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"coverage.html":{}}}],["src/posts/dto/createpost.dto.ts",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/createpost.dto.ts:104",{"_index":383,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dto/createpost.dto.ts:123",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dto/createpost.dto.ts:31",{"_index":386,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dto/createpost.dto.ts:39",{"_index":344,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dto/createpost.dto.ts:52",{"_index":373,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dto/createpost.dto.ts:60",{"_index":379,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dto/createpost.dto.ts:68",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dto/createpost.dto.ts:78",{"_index":360,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dto/createpost.dto.ts:87",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dto/createpost.dto.ts:95",{"_index":350,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dto/getposts.dto.ts",{"_index":608,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"coverage.html":{}}}],["src/posts/dto/getposts.dto.ts:12",{"_index":612,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["src/posts/dto/getposts.dto.ts:8",{"_index":613,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["src/posts/dto/updatepost.dto.ts",{"_index":1107,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/posts/enum/poststatus.enum.ts",{"_index":1447,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enum/posttype.enum.ts",{"_index":1448,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":760,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":859,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:21",{"_index":870,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:28",{"_index":884,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:36",{"_index":873,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:44",{"_index":877,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:52",{"_index":878,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:58",{"_index":865,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:64",{"_index":875,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:71",{"_index":869,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:77",{"_index":874,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:83",{"_index":882,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:90",{"_index":872,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:95",{"_index":864,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":895,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:25",{"_index":915,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:40",{"_index":908,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:56",{"_index":926,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:64",{"_index":911,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":957,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":963,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:21",{"_index":967,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:30",{"_index":973,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:40",{"_index":971,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:45",{"_index":969,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:64",{"_index":975,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dto/createtag.dto.ts",{"_index":423,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/dto/createtag.dto.ts:19",{"_index":429,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["src/tags/dto/createtag.dto.ts:31",{"_index":433,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["src/tags/dto/createtag.dto.ts:36",{"_index":425,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["src/tags/dto/createtag.dto.ts:41",{"_index":431,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["src/tags/dto/createtag.dto.ts:47",{"_index":427,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["src/tags/providers/tags.service",{"_index":977,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":1054,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:13",{"_index":1061,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:18",{"_index":1064,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:27",{"_index":1062,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:32",{"_index":1066,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":1058,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":889,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":1012,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":1018,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":1019,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:31",{"_index":1022,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:37",{"_index":1016,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:43",{"_index":1021,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:50",{"_index":1017,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:55",{"_index":1020,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:58",{"_index":1013,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:61",{"_index":1023,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:64",{"_index":1015,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":1025,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:17",{"_index":1030,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:21",{"_index":1032,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:26",{"_index":1036,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":960,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":1050,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/uploads/enums/filetypes.enum.ts",{"_index":1446,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/uploads/interfaces/uploadfile.interface.ts",{"_index":694,"title":{},"body":{"interfaces/IUploadFile.html":{},"coverage.html":{}}}],["src/uploads/providers/upload",{"_index":1131,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["src/uploads/providers/uploads.service.ts",{"_index":1199,"title":{},"body":{"injectables/UploadsService.html":{},"coverage.html":{}}}],["src/uploads/providers/uploads.service.ts:15",{"_index":1201,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/providers/uploads.service.ts:23",{"_index":1203,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/upload.entity.ts",{"_index":1119,"title":{},"body":{"entities/Upload.html":{},"coverage.html":{}}}],["src/uploads/upload.entity.ts:13",{"_index":1121,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:19",{"_index":1124,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:25",{"_index":1125,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:32",{"_index":1127,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:38",{"_index":1123,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:44",{"_index":1126,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:46",{"_index":1120,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:48",{"_index":1128,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/uploads.controller.ts",{"_index":1166,"title":{},"body":{"controllers/UploadsController.html":{},"coverage.html":{}}}],["src/uploads/uploads.controller.ts:30",{"_index":1173,"title":{},"body":{"controllers/UploadsController.html":{}}}],["src/uploads/uploads.module.ts",{"_index":1193,"title":{},"body":{"modules/UploadsModule.html":{}}}],["src/users/dto/createmanyusers.dto.ts",{"_index":292,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"coverage.html":{}}}],["src/users/dto/createmanyusers.dto.ts:18",{"_index":301,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["src/users/dto/createuser.dto.ts",{"_index":435,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/createuser.dto.ts:16",{"_index":442,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/createuser.dto.ts:22",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/createuser.dto.ts:27",{"_index":440,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/createuser.dto.ts:37",{"_index":456,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dto/getusersparam.dto.ts",{"_index":622,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dto/getusersparam.dto.ts:13",{"_index":625,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["src/users/dto/updateuser.dto.ts",{"_index":1115,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/interfaces/googleuser.interface.ts",{"_index":692,"title":{},"body":{"interfaces/IGoogleUser.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":463,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/providers/users",{"_index":1289,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/TokensProvider.html":{}}}],["src/users/providers/users.service.ts",{"_index":1329,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:25",{"_index":1336,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:38",{"_index":1343,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:60",{"_index":1350,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:68",{"_index":1346,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:79",{"_index":1348,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:83",{"_index":1339,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:87",{"_index":1340,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:91",{"_index":1341,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":734,"title":{},"body":{"injectables/MailService.html":{},"entities/Post.html":{},"injectables/TokensProvider.html":{}}}],["src/users/user.entity.ts",{"_index":1217,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:14",{"_index":1220,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:20",{"_index":1224,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:27",{"_index":1219,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":1225,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:41",{"_index":1222,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:44",{"_index":1228,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:8",{"_index":1223,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1233,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:50",{"_index":1259,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":1244,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:67",{"_index":1241,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:72",{"_index":1262,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":1321,"title":{},"body":{"modules/UsersModule.html":{}}}],["standards",{"_index":1519,"title":{},"body":{"index.html":{}}}],["start",{"_index":1648,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1650,"title":{},"body":{"index.html":{}}}],["start:prodthe",{"_index":1651,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":610,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["started",{"_index":1461,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1372,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":247,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["status",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/UsersService.html":{}}}],["status:200",{"_index":1275,"title":{},"body":{"controllers/UsersController.html":{}}}],["storage",{"_index":1539,"title":{},"body":{"index.html":{}}}],["storing",{"_index":1542,"title":{},"body":{"index.html":{}}}],["story",{"_index":342,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{},"miscellaneous/enumerations.html":{}}}],["strict",{"_index":726,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GoogleTokenDto.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"interfaces/IGoogleUser.html":{},"interfaces/IUploadFile.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string(e",{"_index":1313,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["structure",{"_index":1602,"title":{},"body":{"index.html":{}}}],["sub",{"_index":663,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"interfaces/IActiveUser.html":{},"injectables/TokensProvider.html":{}}}],["subject",{"_index":737,"title":{},"body":{"injectables/MailService.html":{}}}],["success",{"_index":923,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully",{"_index":946,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch('/:id",{"_index":925,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":907,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":945,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1660,"title":{},"body":{"modules.html":{}}}],["supported",{"_index":1211,"title":{},"body":{"injectables/UploadsService.html":{}}}],["supporting",{"_index":1524,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1661,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1575,"title":{},"body":{"index.html":{}}}],["t",{"_index":804,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/TokensProvider.html":{}}}],["table",{"_index":535,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1404,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":551,"title":{"entities/Tag.html":{}},"body":{"classes/FirstMigration1731061477784.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag\"(\"id",{"_index":602,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["tag.entity",{"_index":1052,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":880,"title":{},"body":{"entities/Post.html":{}}}],["tagid",{"_index":584,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["tagrepository",{"_index":1059,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"index.html":{}}}],["tags.controller",{"_index":1051,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":989,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags/tags.module",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":1024,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":99,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsservice",{"_index":965,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":844,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["technologies",{"_index":1501,"title":{},"body":{"index.html":{}}}],["template",{"_index":720,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["templates",{"_index":723,"title":{},"body":{"modules/MailModule.html":{}}}],["test/.../bootstrap",{"_index":1452,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../drop",{"_index":1453,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../users.post.e2e",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/helpers/bootstrap",{"_index":1390,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["test/helpers/drop",{"_index":1394,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["test/users/users.post.e2e",{"_index":1397,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["test:e2egenerate",{"_index":1655,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1569,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1634,"title":{},"body":{"index.html":{}}}],["testto",{"_index":1653,"title":{},"body":{"index.html":{}}}],["text",{"_index":554,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["this.accesstokenguard",{"_index":260,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.authservice.refreshtokens(refreshtokendto",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":268,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.configservice.get('appconfig.apiversion",{"_index":519,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.configservice.get('appconfig.awscloudfronturl')}/${filename",{"_index":1213,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.configservise.get('appconfig.awsbucketname",{"_index":1151,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.createuserprovider.create(createuserdto",{"_index":1366,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.createuserprovider.creategoogleuser(googleuser",{"_index":1367,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.datasource.createqueryrunner",{"_index":1299,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["this.extractrequestfromheader(request",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.generatefilename(file",{"_index":1153,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.generatetokens(user",{"_index":1106,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["this.googleauthservice.authenticate(googletokendto",{"_index":640,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.hashingprovider.comparepassword(signindto.password",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":496,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":1093,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":1098,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["this.jwtconfiguration.googleclientid",{"_index":654,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.googleclientsecret",{"_index":656,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.issuer",{"_index":1100,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":1095,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":1102,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["this.jwtservice.signasync",{"_index":1096,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":1103,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.mailerservice.sendmail",{"_index":735,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.senduserwelcome(newuser",{"_index":498,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.metaoptionsrepository.create(metaoptiondto",{"_index":796,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.findoneby({id",{"_index":798,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.save(metaoption",{"_index":797,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(metaoptiondto",{"_index":775,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.metaoptionsservice.update",{"_index":996,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.oauthclient",{"_index":657,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":660,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.paginationprovider.paginatequery",{"_index":982,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository",{"_index":983,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.create",{"_index":991,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":984,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findonebyorfail",{"_index":993,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":992,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":947,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(parseint(id",{"_index":953,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":944,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(postid",{"_index":951,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":263,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.request.protocol}://${this.request.headers.host",{"_index":846,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signtoken",{"_index":1091,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["this.signtoken(user.id",{"_index":1094,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["this.tagrepository.create(createtagdto",{"_index":1068,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagrepository.delete(id",{"_index":1072,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagrepository.find",{"_index":1070,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagrepository.save(tag",{"_index":1069,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagrepository.softdelete(id",{"_index":1073,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":1042,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":1044,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags",{"_index":999,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.findmultipletags(data.tags",{"_index":987,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softdelete(id",{"_index":1046,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tokensprovider.generatetokens(newuser",{"_index":669,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.tokensprovider.generatetokens(user",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["this.tokensprovider.refreshtokens(refreshtokensdto",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.uploadsrepository.create(uploadfile",{"_index":1215,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadsrepository.save(upload",{"_index":1216,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadsservice.uploadfile(file",{"_index":1190,"title":{},"body":{"controllers/UploadsController.html":{}}}],["this.uploadtoawsprovider.fileupload(file",{"_index":1212,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.userscreatemanyprovider.createmany(createusersdto",{"_index":1368,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create",{"_index":495,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.create(googleuser",{"_index":501,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.findone",{"_index":489,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.findoneby",{"_index":1363,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findonebyorfail",{"_index":1362,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":497,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.save(user",{"_index":502,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersservice.create(user",{"_index":1283,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.creategoogleuser",{"_index":668,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.createmany(users",{"_index":1286,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparams",{"_index":1280,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyemail(signindto.email",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebygoogleid(googleid",{"_index":667,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.findonebyid(sub",{"_index":1105,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":986,"title":{},"body":{"injectables/PostsService.html":{}}}],["throw",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/PostsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":356,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["throws",{"_index":1086,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["timestamp",{"_index":540,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"entities/Post.html":{},"injectables/UploadToAwsProvider.html":{}}}],["title",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/FirstMigration1731061477784.html":{},"entities/Post.html":{}}}],["token",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GoogleTokenDto.html":{},"controllers/UploadsController.html":{}}}],["token.guard",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:15",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:21",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:38",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["tokens",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["tokens')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.provider",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokensprovider",{"_index":203,"title":{"injectables/TokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/TokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["tool",{"_index":1583,"title":{},"body":{"index.html":{}}}],["toolset",{"_index":1576,"title":{},"body":{"index.html":{}}}],["totalitems",{"_index":807,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":809,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["transaction",{"_index":1312,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["transformer",{"_index":307,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginatioQueryDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transport",{"_index":711,"title":{},"body":{"modules/MailModule.html":{}}}],["trim",{"_index":1160,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["true",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@exclude",{"_index":1221,"title":{},"body":{"entities/User.html":{}}}],["true})@jointable",{"_index":881,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":300,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/PostsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/HandleDbErrorOptions.html":{},"injectables/HashingProvider.html":{},"interfaces/IActiveUser.html":{},"interfaces/IGoogleUser.html":{},"interfaces/IUploadFile.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"classes/PaginatioQueryDto.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":484,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/FirstMigration1731061477784.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":782,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":962,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":1053,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([upload",{"_index":1198,"title":{},"body":{"modules/UploadsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1328,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":1118,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1522,"title":{},"body":{"index.html":{}}}],["unable",{"_index":683,"title":{},"body":{"interfaces/HandleDbErrorOptions.html":{}}}],["unauthorizedexception",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/TokensProvider.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception('incorrect",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('user",{"_index":1365,"title":{},"body":{"injectables/UsersService.html":{}}}],["unauthorizedexception(e",{"_index":670,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/TokensProvider.html":{}}}],["undefined",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateUserProvider.html":{},"entities/Post.html":{},"entities/Upload.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["undefined'])@apioperation({summary",{"_index":1171,"title":{},"body":{"controllers/UploadsController.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":299,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isoptional()@isarray()@isint({each",{"_index":382,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":547,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1571,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/TokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1671,"title":{},"body":{"properties.html":{}}}],["up",{"_index":525,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["up(queryrunner",{"_index":532,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["update",{"_index":596,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["update(metaotionid",{"_index":789,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["update(postid",{"_index":974,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":924,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatedat",{"_index":558,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"entities/Tag.html":{}}}],["updatedate",{"_index":542,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"entities/MetaOption.html":{},"entities/Upload.html":{}}}],["updatedatecolumn",{"_index":758,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["updatemetaoptiondto",{"_index":790,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["updatemetaoptiondto.metavalue",{"_index":800,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["updatepost",{"_index":900,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(postid",{"_index":917,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepostdto",{"_index":918,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updatepostdto.metaoptions",{"_index":994,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto.tags",{"_index":998,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostmetaoptionsdto",{"_index":791,"title":{"classes/UpdatePostMetaOptionsDto.html":{}},"body":{"injectables/MetaOptionsService.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["updates",{"_index":919,"title":{},"body":{"controllers/PostsController.html":{}}}],["updateuser",{"_index":1237,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(@body",{"_index":1287,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(user",{"_index":1261,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":1114,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["upload",{"_index":577,"title":{"entities/Upload.html":{}},"body":{"classes/FirstMigration1731061477784.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"index.html":{}}}],["upload.entity",{"_index":1197,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["uploadedfile",{"_index":1174,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadfile",{"_index":1168,"title":{},"body":{"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["uploadfile(@uploadedfile",{"_index":1189,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadfile(file",{"_index":1169,"title":{},"body":{"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["uploadresult",{"_index":1149,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploadresult.key",{"_index":1156,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploads",{"_index":1167,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploads.controller",{"_index":1194,"title":{},"body":{"modules/UploadsModule.html":{}}}],["uploads/uploads.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["uploadscontroller",{"_index":1165,"title":{"controllers/UploadsController.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"coverage.html":{}}}],["uploadsmodule",{"_index":100,"title":{"modules/UploadsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UploadsModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadsrepository",{"_index":1202,"title":{},"body":{"injectables/UploadsService.html":{}}}],["uploadsservice",{"_index":1180,"title":{"injectables/UploadsService.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadtoawsprovider",{"_index":1130,"title":{"injectables/UploadToAwsProvider.html":{}},"body":{"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["uq_3413aed3ecde54f832c4f44f045",{"_index":561,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["uq_6a9775008add570dc3e5a0bab7b",{"_index":560,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["uq_cd1bddce36edc3e766798eab376",{"_index":568,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["uq_e12875dfb3b1d92d7d7c5377e22",{"_index":573,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["url",{"_index":362,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"index.html":{}}}],["url\"'})@maxlength(256",{"_index":372,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url'})@isstring()@isnotempty()@matches(/^[a",{"_index":432,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["url(this.request.url",{"_index":848,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":1641,"title":{},"body":{"index.html":{}}}],["useclass",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["used",{"_index":1533,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["useinterceptors",{"_index":1175,"title":{},"body":{"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":1281,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1183,"title":{},"body":{"controllers/UploadsController.html":{}}}],["useinterceptors(undefined)@apiheaders(['undefined",{"_index":1170,"title":{},"body":{"controllers/UploadsController.html":{}}}],["user",{"_index":232,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"classes/FirstMigration1731061477784.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/TokensProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user\"(\"id",{"_index":599,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["user.email",{"_index":736,"title":{},"body":{"injectables/MailService.html":{},"injectables/TokensProvider.html":{}}}],["user.entity",{"_index":483,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":739,"title":{},"body":{"injectables/MailService.html":{}}}],["user.id",{"_index":1092,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["user.password",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.posts",{"_index":862,"title":{},"body":{"entities/Post.html":{}}}],["user.provider",{"_index":1327,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.provider.ts",{"_index":464,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:19",{"_index":470,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:27",{"_index":473,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:52",{"_index":476,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.sub",{"_index":948,"title":{},"body":{"controllers/PostsController.html":{}}}],["user?.[field",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":916,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TokensProvider.html":{}}}],["users",{"_index":293,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["users.controller",{"_index":1322,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service.ts",{"_index":1356,"title":{},"body":{"injectables/UsersService.html":{}}}],["users/users.module",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1232,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemanyprovider",{"_index":1288,"title":{"injectables/UsersCreateManyProvider.html":{}},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":101,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":471,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":220,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/TokensProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":369,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"index.html":{}}}],["using",{"_index":1470,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":1148,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["uuid4",{"_index":1147,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uuid4()}${extension",{"_index":1164,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["v4",{"_index":1146,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["valid",{"_index":1644,"title":{},"body":{"index.html":{}}}],["validatenested",{"_index":304,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validation",{"_index":354,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["validationschema",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":305,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginatioQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdatePostMetaOptionsDto.html":{},"dependencies.html":{}}}],["value",{"_index":527,"title":{},"body":{"classes/FirstMigration1731061477784.html":{},"classes/PaginatioQueryDto.html":{},"injectables/TagsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":340,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":866,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["variable",{"_index":1377,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1672,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["varying",{"_index":572,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["varying(1024",{"_index":556,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["varying(128",{"_index":580,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["varying(256",{"_index":552,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["varying(512",{"_index":553,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["varying(96",{"_index":570,"title":{},"body":{"classes/FirstMigration1731061477784.html":{}}}],["version",{"_index":1474,"title":{},"body":{"index.html":{},"properties.html":{}}}],["void",{"_index":649,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"miscellaneous/functions.html":{}}}],["want",{"_index":1257,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":1649,"title":{},"body":{"index.html":{}}}],["web",{"_index":1540,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":738,"title":{},"body":{"injectables/MailService.html":{}}}],["without",{"_index":370,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["world",{"_index":159,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":1084,"title":{},"body":{"injectables/TokensProvider.html":{}}}],["z0",{"_index":364,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constants';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n  async canActivate(\n    context: ExecutionContext,\n  ): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractRequestFromHeader(request);    \n    if(!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(token, this.jwtConfiguration);\n      request[REQUEST_USER_KEY] = payload;\n    } catch(e) {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private extractRequestFromHeader(request: Request): string | undefined {\n    const [_, token] = request.headers.authorization?.split(\" \") ?? [];\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UploadsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule } from '@nestjs/config';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/metaOptions.module';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport database from './config/database.config';\nimport appConfig from './config/app.config';\nimport environmentValidation from './config/environment.validation';\nimport jwtConfig from './auth/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport { DataResponseInterceptor } from './common/interceptors/data-response/data-response.interceptor';\nimport { UploadsModule } from './uploads/uploads.module';\nimport { MailModule } from './mail/mail.module';\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [database, appConfig],\n      validationSchema: environmentValidation,\n      expandVariables: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n    }),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    TypeOrmModule.forRootAsync({\n      useFactory: database,\n    }),\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    TagsModule,\n    MetaOptionsModule,\n    PaginationModule,\n    UploadsModule,\n    MailModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: DataResponseInterceptor,\n    },\n    AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/refresh-tokens')@HttpCode(HttpStatus.OK)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-in')@HttpCode(HttpStatus.OK)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { SignInDto } from './dto/signin.dto';\nimport { Auth } from './decorators/auth.decorator';\nimport { AuthType } from './enums/authType.enum';\nimport { RefreshTokenDto } from './dto/refreshToken.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('/sign-in')\n  @HttpCode(HttpStatus.OK)\n  @Auth(AuthType.None)\n  public async signIn(@Body() signInDto: SignInDto){\n    return this.authService.signIn(signInDto);\n  }\n\n  @Post('/refresh-tokens')\n  @HttpCode(HttpStatus.OK)\n  @Auth(AuthType.None)\n  public async refreshTokens(@Body() refreshTokenDto: RefreshTokenDto){\n    return this.authService.refreshTokens(refreshTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nTokensProvider\n\nTokensProvider\n\nAuthModule -->\n\nTokensProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            TokensProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport {TokensProvider } from './providers/tokens.provider';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\nimport { GoogleAuthenticationService } from './social/providers/google-authentication.service';\n\n@Module({\n  controllers: [AuthController, GoogleAuthenticationController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider,\n      useClass: BcryptProvider,\n    },\n    TokensProvider,\n    GoogleAuthenticationService,\n  ],\n  imports: [\n    forwardRef(() => UsersModule),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  exports: [AuthService, HashingProvider],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, hashingProvider: HashingProvider, tokensProvider: TokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tokensProvider\n                                                  \n                                                        \n                                                                        TokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokensDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokensDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { SignInDto } from '../dto/signin.dto';\nimport { HashingProvider } from './hashing.provider';\nimport { handleDbError } from 'src/common/utils/exception.util';\nimport { TokensProvider } from './tokens.provider';\nimport { RefreshTokenDto } from '../dto/refreshToken.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n    private readonly hashingProvider: HashingProvider,\n    private readonly tokensProvider: TokensProvider,\n  ) {}\n\n  public async signIn(signInDto: SignInDto) {\n    const user = await this.usersService.findOneByEmail(signInDto.email);\n    const isEqual = await handleDbError(\n      () =>\n        this.hashingProvider.comparePassword(signInDto.password, user.password),\n      { description: 'Could not compare passwords' },\n    );\n    if (!isEqual) {\n      throw new UnauthorizedException('Incorrect Password');\n    }\n\n    return this.tokensProvider.generateTokens(user);\n  }\n\n  public async refreshTokens(refreshTokensDto: RefreshTokenDto) {\n    return this.tokensProvider.refreshTokens(refreshTokensDto)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AuthType } from 'src/auth/enums/authType.enum';\nimport { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constants';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]) ?? [AuthenticationGuard.defaultAuthType];\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n\n    for (const instance of guards) {\n      const canActivate = await Promise.resolve(\n        instance.canActivate(context),\n      ).catch((e) => {\n        console.log('error', e);\n      });\n      if (canActivate) {\n        return true;\n      }\n    }\n    throw new UnauthorizedException();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  public async hashPassword(data: string | Buffer): Promise {\n    const salt = await bcrypt.genSalt();\n    return bcrypt.hash(data, salt);\n  }\n  public async comparePassword(data: string | Buffer, encrypted: string): Promise {\n    return bcrypt.compare(data, encrypted);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/createManyUsers.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createManyUsers.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { CreateUserDto } from './createUser.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateManyUsersDto {\n  @ApiProperty({\n    type: 'array',\n    required: true,\n    items: {\n      type: 'User',\n    },\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/createPost.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'The post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values, 'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})@IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For Example - 'my-url'', example: 'my-blog-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible values 'draft', 'scheduled', 'review', 'published''})@IsEnum(PostStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'This is the title for the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/createPost.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsDateString,\n  IsEnum,\n  IsInt,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { PostStatus } from '../enum/postStatus.enum';\nimport { PostType } from '../enum/postType.enum';\nimport { CreatePostMetaOptionsDto } from 'src/meta-options/dto/createPostMetaOptions.dto';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'This is the title for the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values, 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  @ApiProperty({\n    description: \"For Example - 'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  @MaxLength(256)\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description: \"Possible values 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'The post content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example:\n      '{\\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'Featured image for your blog post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The date on which the blog post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsDateString()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1,2],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true })\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    type: 'string',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metavalue: {\n          type: 'json',\n          description: 'The metaValue is a JSON string',\n          example: '{\"sidebarEnabled\": true}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto | null;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dto/createPostMetaOptions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dto/createPostMetaOptions.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString, MaxLength } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dto/createTag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dto/createTag.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dto/createTag.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dto/createTag.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dto/createTag.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example - 'my-url'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dto/createTag.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n    IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  @ApiProperty({\n    description: \"For example - 'my-url\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  @MaxLength(256)\n  slug: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/createUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/createUser.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  @MaxLength(96)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, hashingProvider: HashingProvider, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: IGoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            IGoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  forwardRef,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dto/createUser.dto';\nimport { handleDbError } from 'src/common/utils/exception.util';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entity';\nimport { Repository } from 'typeorm';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { IGoogleUser } from '../interfaces/googleUser.interface';\nimport { MailService } from 'src/mail/providers/mail.service';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    @InjectRepository(User) private readonly usersRepository: Repository,\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n    private readonly mailService: MailService,\n  ) {}\n\n  public async create(createUserDto: CreateUserDto) {\n    let user = undefined;\n    user = await handleDbError(() =>\n      this.usersRepository.findOne({\n        where: { email: createUserDto.email },\n      }),\n    );\n    if (user) {\n      throw new BadRequestException('User already exist');\n    }\n    let newUser = await this.usersRepository.create({\n      ...createUserDto,\n      password: await this.hashingProvider.hashPassword(createUserDto.password),\n    });\n\n    newUser = await handleDbError(() => this.usersRepository.save(newUser));\n    \n    try {\n      await this.mailService.sendUserWelcome(newUser);\n    } catch (e) {\n      throw new RequestTimeoutException(e);\n    }\n    return newUser;\n  }\n\n  public async createGoogleUser(googleUser: IGoogleUser) {\n    try {\n      const user = this.usersRepository.create(googleUser);\n      return this.usersRepository.save(user);\n    } catch (e) {\n      throw new ConflictException(e, {\n        description: 'Could not create a new user',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/data-response/data-response.interceptor.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/data-response/data-response.interceptor.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { map, Observable } from 'rxjs';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  constructor(private readonly configService: ConfigService) {}\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data) => ({\n        apiVersion: this.configService.get('appConfig.apiVersion'),\n        data: data,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FirstMigration1731061477784.html":{"url":"classes/FirstMigration1731061477784.html","title":"class - FirstMigration1731061477784","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FirstMigration1731061477784\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1731061477784-firstMigration.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'FirstMigration1731061477784'\n                    \n                \n                    \n                        \n                                Defined in src/migrations/1731061477784-firstMigration.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1731061477784-firstMigration.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1731061477784-firstMigration.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class FirstMigration1731061477784 implements MigrationInterface {\n    name = 'FirstMigration1731061477784'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \"meta_option\" (\"id\" SERIAL NOT NULL, \"metaValue\" json NOT NULL, \"createDate\" TIMESTAMP NOT NULL DEFAULT now(), \"updateDate\" TIMESTAMP NOT NULL DEFAULT now(), \"postId\" integer, CONSTRAINT \"REL_b492d76365f19dffc4d60a7f86\" UNIQUE (\"postId\"), CONSTRAINT \"PK_59e834d6ba39bd9bd7c99b8805d\" PRIMARY KEY (\"id\"))`);\n        await queryRunner.query(`CREATE TABLE \"tag\" (\"id\" SERIAL NOT NULL, \"name\" character varying(256) NOT NULL, \"slug\" character varying(512) NOT NULL, \"description\" text, \"schema\" text, \"featuredImage\" character varying(1024), \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(), \"updatedAt\" TIMESTAMP NOT NULL DEFAULT now(), \"deletedAt\" TIMESTAMP, CONSTRAINT \"UQ_6a9775008add570dc3e5a0bab7b\" UNIQUE (\"name\"), CONSTRAINT \"UQ_3413aed3ecde54f832c4f44f045\" UNIQUE (\"slug\"), CONSTRAINT \"PK_8e4052373c579afc1471f526760\" PRIMARY KEY (\"id\"))`);\n        await queryRunner.query(`CREATE TYPE \"public\".\"post_posttype_enum\" AS ENUM('post', 'page', 'story', 'series')`);\n        await queryRunner.query(`CREATE TYPE \"public\".\"post_status_enum\" AS ENUM('draft', 'scheduled', 'review', 'published')`);\n        await queryRunner.query(`CREATE TABLE \"post\" (\"id\" SERIAL NOT NULL, \"title\" character varying(512) NOT NULL, \"postType\" \"public\".\"post_posttype_enum\" NOT NULL DEFAULT 'post', \"slug\" character varying(256) NOT NULL, \"status\" \"public\".\"post_status_enum\" NOT NULL DEFAULT 'draft', \"content\" text, \"schema\" text, \"featuredImageUrl\" character varying(1024), \"publishOn\" TIMESTAMP, \"authorId\" integer, CONSTRAINT \"UQ_cd1bddce36edc3e766798eab376\" UNIQUE (\"slug\"), CONSTRAINT \"PK_be5fda3aac270b134ff9c21cdee\" PRIMARY KEY (\"id\"))`);\n        await queryRunner.query(`CREATE TABLE \"user\" (\"id\" SERIAL NOT NULL, \"firstName\" character varying(96) NOT NULL, \"lastName\" character varying(96), \"email\" character varying(96) NOT NULL, \"password\" character varying(96), \"googleId\" character varying, CONSTRAINT \"UQ_e12875dfb3b1d92d7d7c5377e22\" UNIQUE (\"email\"), CONSTRAINT \"PK_cace4a159ff9f2512dd42373760\" PRIMARY KEY (\"id\"))`);\n        await queryRunner.query(`CREATE TYPE \"public\".\"upload_type_enum\" AS ENUM('image')`);\n        await queryRunner.query(`CREATE TABLE \"upload\" (\"id\" SERIAL NOT NULL, \"name\" character varying(1024) NOT NULL, \"path\" character varying(1024) NOT NULL, \"type\" \"public\".\"upload_type_enum\" NOT NULL DEFAULT 'image', \"mime\" character varying(128) NOT NULL, \"size\" character varying(1024) NOT NULL, \"createDate\" TIMESTAMP NOT NULL DEFAULT now(), \"updateDate\" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT \"PK_1fe8db121b3de4ddfa677fc51f3\" PRIMARY KEY (\"id\"))`);\n        await queryRunner.query(`CREATE TABLE \"post_tags_tag\" (\"postId\" integer NOT NULL, \"tagId\" integer NOT NULL, CONSTRAINT \"PK_e9b7b8e6a07bdccb6a954171676\" PRIMARY KEY (\"postId\", \"tagId\"))`);\n        await queryRunner.query(`CREATE INDEX \"IDX_b651178cc41334544a7a9601c4\" ON \"post_tags_tag\" (\"postId\") `);\n        await queryRunner.query(`CREATE INDEX \"IDX_41e7626b9cc03c5c65812ae55e\" ON \"post_tags_tag\" (\"tagId\") `);\n        await queryRunner.query(`ALTER TABLE \"meta_option\" ADD CONSTRAINT \"FK_b492d76365f19dffc4d60a7f863\" FOREIGN KEY (\"postId\") REFERENCES \"post\"(\"id\") ON DELETE CASCADE ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \"post\" ADD CONSTRAINT \"FK_c6fb082a3114f35d0cc27c518e0\" FOREIGN KEY (\"authorId\") REFERENCES \"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \"post_tags_tag\" ADD CONSTRAINT \"FK_b651178cc41334544a7a9601c45\" FOREIGN KEY (\"postId\") REFERENCES \"post\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE`);\n        await queryRunner.query(`ALTER TABLE \"post_tags_tag\" ADD CONSTRAINT \"FK_41e7626b9cc03c5c65812ae55e8\" FOREIGN KEY (\"tagId\") REFERENCES \"tag\"(\"id\") ON DELETE CASCADE ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \"post_tags_tag\" DROP CONSTRAINT \"FK_41e7626b9cc03c5c65812ae55e8\"`);\n        await queryRunner.query(`ALTER TABLE \"post_tags_tag\" DROP CONSTRAINT \"FK_b651178cc41334544a7a9601c45\"`);\n        await queryRunner.query(`ALTER TABLE \"post\" DROP CONSTRAINT \"FK_c6fb082a3114f35d0cc27c518e0\"`);\n        await queryRunner.query(`ALTER TABLE \"meta_option\" DROP CONSTRAINT \"FK_b492d76365f19dffc4d60a7f863\"`);\n        await queryRunner.query(`DROP INDEX \"public\".\"IDX_41e7626b9cc03c5c65812ae55e\"`);\n        await queryRunner.query(`DROP INDEX \"public\".\"IDX_b651178cc41334544a7a9601c4\"`);\n        await queryRunner.query(`DROP TABLE \"post_tags_tag\"`);\n        await queryRunner.query(`DROP TABLE \"upload\"`);\n        await queryRunner.query(`DROP TYPE \"public\".\"upload_type_enum\"`);\n        await queryRunner.query(`DROP TABLE \"user\"`);\n        await queryRunner.query(`DROP TABLE \"post\"`);\n        await queryRunner.query(`DROP TYPE \"public\".\"post_status_enum\"`);\n        await queryRunner.query(`DROP TYPE \"public\".\"post_posttype_enum\"`);\n        await queryRunner.query(`DROP TABLE \"tag\"`);\n        await queryRunner.query(`DROP TABLE \"meta_option\"`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto.html":{"url":"classes/GetPostsBaseDto.html","title":"class - GetPostsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/getPosts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/getPosts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/getPosts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from \"@nestjs/swagger\";\nimport { IsDate, IsOptional } from \"class-validator\";\nimport { PaginatioQueryDto } from \"src/common/pagination/dto/paginationQuery.dto\";\n\nclass GetPostsBaseDto {\n    @IsDate()\n    @IsOptional()\n    startDate?: Date;\n\n    @IsDate()\n    @IsOptional()\n    endDate?: Date\n}\n\nexport class GetPostsDto extends IntersectionType(GetPostsBaseDto, PaginatioQueryDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsDto.html":{"url":"classes/GetPostsDto.html","title":"class - GetPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/getPosts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(GetPostsBaseDto, PaginatioQueryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from \"@nestjs/swagger\";\nimport { IsDate, IsOptional } from \"class-validator\";\nimport { PaginatioQueryDto } from \"src/common/pagination/dto/paginationQuery.dto\";\n\nclass GetPostsBaseDto {\n    @IsDate()\n    @IsOptional()\n    startDate?: Date;\n\n    @IsDate()\n    @IsOptional()\n    endDate?: Date\n}\n\nexport class GetPostsDto extends IntersectionType(GetPostsBaseDto, PaginatioQueryDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/getUsersParam.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/getUsersParam.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: \"Get user with specific id\",\n    example: 1234\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { GoogleTokenDto } from './dto/googleToken.dto';\nimport { Auth } from '../decorators/auth.decorator';\nimport { AuthType } from '../enums/authType.enum';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\n\n@Auth(AuthType.None)\n@Controller('google-authentication')\nexport class GoogleAuthenticationController {\n    constructor(\n        private readonly googleAuthService: GoogleAuthenticationService\n    ) {}\n\n    @Post()\n    public authenticate(@Body() googleTokenDto: GoogleTokenDto) {\n        return this.googleAuthService.authenticate(googleTokenDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oAuthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfiguration: ConfigType<>, usersService: UsersService, tokensProvider: TokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-authentication.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tokensProvider\n                                                  \n                                                        \n                                                                        TokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oAuthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-authentication.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  OnModuleInit,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { OAuth2Client } from 'google-auth-library';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { GoogleTokenDto } from '../dto/googleToken.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { TokensProvider } from 'src/auth/providers/tokens.provider';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n  private oAuthClient: OAuth2Client;\n\n  constructor(\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n    private readonly usersService: UsersService,\n    private readonly tokensProvider: TokensProvider,\n  ) {}\n\n  onModuleInit() {\n    const clientId = this.jwtConfiguration.googleClientId;\n    const clientSecret = this.jwtConfiguration.googleClientSecret;\n    this.oAuthClient = new OAuth2Client(clientId, clientSecret);\n  }\n\n  public async authenticate(googleTokenDto: GoogleTokenDto) {\n    try {\n      const loginTicket = await this.oAuthClient.verifyIdToken({\n        idToken: googleTokenDto.token,\n      });\n\n      const {\n        email,\n        sub: googleId,\n        given_name: firstName,\n        family_name: lastName,\n      } = loginTicket.getPayload();\n\n      const user = await this.usersService.findOneByGoogleId(googleId);\n\n      if (user) {\n        return this.tokensProvider.generateTokens(user);\n      }\n      const newUser = await this.usersService.createGoogleUser({\n        email,\n        firstName,\n        lastName,\n        googleId,\n      });\n      return this.tokensProvider.generateTokens(newUser);\n    } catch (e) {\n      throw new UnauthorizedException(e);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dto/googleToken.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dto/googleToken.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GoogleTokenDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HandleDbErrorOptions.html":{"url":"interfaces/HandleDbErrorOptions.html","title":"interface - HandleDbErrorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HandleDbErrorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/utils/exception.util.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequestTimeoutException } from '@nestjs/common';\n\ninterface HandleDbErrorOptions {\n  message?: string;\n  description?: string;\n}\n\nexport async function handleDbError(\n  fn: () => Promise,\n  options: HandleDbErrorOptions = {},\n) {\n  const { message, description } = options;\n  try {\n    return await fn();\n  } catch (e) {\n    console.log(e);\n    throw new RequestTimeoutException(message ?? 'Unable to process request', {\n      description: description ?? e.toString(),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n    abstract hashPassword(data: string | Buffer): Promise;\n    abstract comparePassword(data: string | Buffer, encrypted: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IActiveUser.html":{"url":"interfaces/IActiveUser.html","title":"interface - IActiveUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IActiveUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/activeUser.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IActiveUser {\n    sub: number;\n    email: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGoogleUser.html":{"url":"interfaces/IGoogleUser.html","title":"interface - IGoogleUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGoogleUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/googleUser.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            googleId\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        googleId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        googleId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IGoogleUser {\n    email: string,\n    firstName: string,\n    lastName: string,\n    googleId: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUploadFile.html":{"url":"interfaces/IUploadFile.html","title":"interface - IUploadFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUploadFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/interfaces/uploadFile.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mime\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         FileTypes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FileTypes\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FileTypes } from '../enums/fileTypes.enum';\n\nexport interface IUploadFile {\n  name: string;\n  path: string;\n  type: FileTypes;\n  mime: string;\n  size: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_exports\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { MailService } from './providers/mail.service';\nimport { ConfigService } from '@nestjs/config';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { join } from 'path';\nimport { EjsAdapter } from '@nestjs-modules/mailer/dist/adapters/ejs.adapter';\n\n@Global()\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (config: ConfigService) => ({\n        transport: {\n          host: config.get('appConfig.mailHost'),\n          secure: false,\n          port: 2525,\n          auth: {\n            user: config.get('appConfig.smtpUsername'),\n            pass: config.get('appConfig.smtpPassword'),\n          },\n        },\n        default: {\n          from: `My Blog `,\n        },\n        template: {\n          dir: join(__dirname, 'templates'),\n          adapter: new EjsAdapter({\n            inlineCssEnabled: true\n          }),\n          options: {\n            strict: false\n          }\n        },\n      }),\n    }),\n  ],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/providers/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                sendUserWelcome\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/providers/mail.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        sendUserWelcome\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendUserWelcome(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport { User } from 'src/users/user.entity';\n\n@Injectable()\nexport class MailService {\n  constructor(private mailerService: MailerService) {}\n\n  public async sendUserWelcome(user: User): Promise {\n    await this.mailerService.sendMail({\n        to: user.email,\n        subject: 'Welcome to Nestjs Blog',\n        template: './welcome',\n        context: {\n            name: user.firstName,\n            email: user.email,\n            loginUrl: 'http://localhost:3000'\n        }\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/metaOption.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/metaOption.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/metaOption.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/metaOption.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/metaOption.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/metaOption.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/metaOptions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                createMetaOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        createMetaOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOption(metaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/metaOptions.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                metaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { MetaOptionsService } from './providers/metaOptions.service';\nimport { CreatePostMetaOptionsDto } from './dto/createPostMetaOptions.dto'; \n\n@Controller('meta-options')\nexport class MetaOptionsController {\n    constructor(private readonly metaOptionsService: MetaOptionsService) {}\n\n    @Post()\n    public async createMetaOption(@Body() metaOptionDto: CreatePostMetaOptionsDto) {\n        return this.metaOptionsService.create(metaOptionDto);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/metaOptions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './metaOptions.controller';\nimport { MetaOption } from './metaOption.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOptionsService } from './providers/metaOptions.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  controllers: [MetaOptionsController],\n  providers: [MetaOptionsService],\n  exports: [MetaOptionsService]\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/metaOptions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/metaOptions.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(metaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/metaOptions.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                metaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(metaOtionId: number, updateMetaOptionDto: UpdatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/metaOptions.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                metaOtionId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateMetaOptionDto\n                                            \n                                                            UpdatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from '../metaOption.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostMetaOptionsDto } from '../dto/createPostMetaOptions.dto'; \nimport { UpdatePostMetaOptionsDto } from '../dto/updatePostMetaOptions.dto';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    @InjectRepository(MetaOption)\n    private readonly metaOptionsRepository: Repository,\n  ) {}\n\n  public async create(metaOptionDto: CreatePostMetaOptionsDto) {\n    const metaOption = await this.metaOptionsRepository.create(metaOptionDto);\n    return this.metaOptionsRepository.save(metaOption);\n  }\n\n  public async update(metaOtionId: number, updateMetaOptionDto: UpdatePostMetaOptionsDto) {\n    const metaOption = await this.metaOptionsRepository.findOneBy({id: metaOtionId})\n    metaOption.metaValue = updateMetaOptionDto.metaValue;\n    return this.metaOptionsRepository.save(metaOption);\n    \n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[];\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    previous: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatioQueryDto.html":{"url":"classes/PaginatioQueryDto.html","title":"class - PaginatioQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatioQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dto/paginationQuery.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dto/paginationQuery.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dto/paginationQuery.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsOptional, IsPositive } from 'class-validator';\n\nexport class PaginatioQueryDto {\n  @IsOptional()\n  @IsPositive()\n  limit?: number = 10;\n  @IsOptional()\n  @IsPositive()\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaginationModule_exports\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports:[PaginationProvider]\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginatioQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:12\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginatioQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PaginatioQueryDto } from '../dto/paginationQuery.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n@Injectable()\nexport class PaginationProvider {\n  constructor(@Inject(REQUEST) private readonly request: Request) {}\n\n  public async paginateQuery(\n    paginationQuery: PaginatioQueryDto,\n    repository: Repository,\n  ): Promise> {\n    const results = await repository.find({\n      skip: (paginationQuery.page - 1) * paginationQuery.limit,\n      take: paginationQuery.limit,\n    });\n    const baseUrl = `${this.request.protocol}://${this.request.headers.host}/`;\n    const newUrl = new URL(this.request.url, baseUrl);\n\n    const totalItems = await repository.count();\n    const totalPages = totalItems / Math.ceil(paginationQuery.limit);\n\n    const nextPage =\n      paginationQuery.page === totalPages\n        ? paginationQuery.page\n        : paginationQuery.page + 1;\n\n    const previousPage =\n      paginationQuery.page === 1\n        ? paginationQuery.page\n        : paginationQuery.page - 1;\n\n    const finalResponse: Paginated = {\n      data: results,\n      meta: {\n        itemsPerPage: paginationQuery.limit,\n        totalItems,\n        currentPage: paginationQuery.page,\n        totalPages,\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=1`,\n        last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${totalPages}`,\n        current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${paginationQuery.page}`,\n        next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${nextPage}`,\n        previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${previousPage}`,\n      },\n    };\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostType } from './enum/postType.enum';\nimport { PostStatus } from './enum/postStatus.enum';\nimport { CreatePostMetaOptionsDto } from 'src/meta-options/dto/createPostMetaOptions.dto';\nimport { MetaOption } from 'src/meta-options/metaOption.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    enum: PostType,\n    nullable: false,\n    default: PostType.POST,\n  })\n  postType: PostType;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum: PostStatus,\n    nullable: false,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  publishOn?: Date;\n\n  @ManyToMany(() => Tag, (tag) => tag.posts, {\n    eager: true,\n  })\n  @JoinTable()\n  tags?: Tag[];\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    // cascade: ['remove', 'insert'],\n    cascade: true,\n    eager: true,\n  })\n  metaOptions?: MetaOption;\n\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                deletePost\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: IActiveUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new blog post'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IActiveUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: number, postQuery: GetPostsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(postId: number, updatePostDto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post in the database.'})@ApiResponse({status: 200, description: 'You get a success 200 response if the post is updated successfully'})@Patch('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatePostDto\n                                            \n                                                            UpdatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dto/createPost.dto';\nimport { UpdatePostDto } from './dto/updatePost.dto';\nimport { GetPostsDto } from './dto/getPosts.dto';\nimport { ActiveUser } from 'src/auth/decorators/activeUser.decorator';\nimport { IActiveUser } from 'src/auth/interfaces/activeUser.interface';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/:userId?')\n  public async getPosts(\n    @Param('userId') userId: number,\n    @Query() postQuery: GetPostsDto,\n  ) {\n    return this.postsService.findAll(userId, postQuery);\n  }\n\n  @ApiOperation({\n    summary: 'Create a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post is created successfully',\n  })\n  @Post()\n  public createPost(\n    @Body() createPostDto: CreatePostDto,\n    @ActiveUser() user: IActiveUser,\n  ) {\n    return this.postsService.create(createPostDto, user.sub);\n  }\n\n  @ApiOperation({\n    summary: 'Updates an existing blog post in the database.',\n  })\n  @ApiResponse({\n    status: 200,\n    description:\n      'You get a success 200 response if the post is updated successfully',\n  })\n  @Patch('/:id')\n  public async updatePost(\n    @Param('id') postId: number,\n    @Body() updatePostDto: UpdatePostDto,\n  ) {\n    return this.postsService.update(postId, updatePostDto);\n  }\n\n  @Delete('/:id')\n  public async deletePost(@Param('id') id: string) {\n    return this.postsService.delete(parseInt(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nMetaOptionsModule->PostsModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/metaOption.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { MetaOptionsModule } from 'src/meta-options/metaOptions.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Post]), UsersModule, TagsModule, MetaOptionsModule, PaginationModule],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, tagsService: TagsService, metaOptionsService: MetaOptionsService, paginationProvider: PaginationProvider, postsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsService\n                                                  \n                                                        \n                                                                        MetaOptionsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: CreatePostDto, userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number, postQuery: GetPostsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(postId: number, updatePostDto: UpdatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatePostDto\n                                            \n                                                            UpdatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dto/createPost.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Post } from '../post.entity';\nimport { Repository } from 'typeorm';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { UpdatePostDto } from '../dto/updatePost.dto';\nimport { MetaOptionsService } from 'src/meta-options/providers/metaOptions.service';\nimport { GetPostsDto } from '../dto/getPosts.dto';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { handleDbError } from 'src/common/utils/exception.util';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly tagsService: TagsService,\n    private readonly metaOptionsService: MetaOptionsService,\n    private readonly paginationProvider: PaginationProvider,\n    @InjectRepository(Post) private postsRepository: Repository,\n  ) {}\n\n  public async findAll(\n    userId: number,\n    postQuery: GetPostsDto,\n  ): Promise> {\n    return this.paginationProvider.paginateQuery(\n      postQuery,\n      this.postsRepository,\n    );\n  }\n\n  public async delete(id: number) {\n    await this.postsRepository.delete(id);\n    return { deleted: true, id };\n  }\n\n  public async create(data: CreatePostDto, userId: number) {\n    const author = await handleDbError(() =>\n      this.usersService.findOneById(userId),\n    );\n    const tags = await handleDbError(() =>\n      this.tagsService.findMultipleTags(data.tags),\n    );\n    \n    if (data.tags.length !== tags.length) {\n      throw new BadRequestException('Check tag ids');\n    }\n    const post = this.postsRepository.create({\n      ...data,\n      author,\n      tags,\n    });\n    return await handleDbError(() => this.postsRepository.save(post));\n  }\n\n  public async update(postId: number, updatePostDto: UpdatePostDto) {\n    const post = await this.postsRepository.findOneByOrFail({ id: postId });\n    if (updatePostDto.metaOptions && post.metaOptions) {\n      try {\n        const newMetaOptions = await this.metaOptionsService.update(\n          post.metaOptions.id,\n          updatePostDto.metaOptions,\n        );\n        post.metaOptions = newMetaOptions;\n        delete updatePostDto.metaOptions;\n      } catch (e) {\n        throw new RequestTimeoutException();\n      }\n    }\n    if (updatePostDto.tags) {\n      try {\n        const tags = await this.tagsService.findMultipleTags(\n          updatePostDto.tags,\n        );\n        post.tags = tags;\n        delete updatePostDto.tags;\n      } catch (e) {\n        throw new NotFoundException('Tags not found');\n      }\n      Object.assign(post, updatePostDto);\n      try {\n        return this.postsRepository.save(post);\n      } catch (e) {\n        throw new RequestTimeoutException();\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/refreshToken.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/refreshToken.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @IsNotEmpty()\n  @IsString()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/signin.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/signin.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class SignInDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n  \n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:61\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: string;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImage: string;\n\n  @ManyToMany(()=> Post, (post)=> post.tags, {\n    onDelete: 'CASCADE'\n  })\n  posts: Post[]\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n  \n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                deleteTag\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                softDeleteTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        softDeleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDeleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/soft-delete/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Param,\n  ParseIntPipe,\n  Post,\n} from '@nestjs/common';\nimport { TagsService } from './providers/tags.service';\nimport { CreateTagDto } from './dto/createTag.dto';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(private tagsService: TagsService) {}\n\n  @Post()\n  public async createTag(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.create(createTagDto);\n  }\n  @Delete('/:id')\n  public async deleteTag(@Param('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n\n  @Delete('/soft-delete/:id')\n  public async softDeleteTag(@Param('id', ParseIntPipe) id: number) {\n    return this.tagsService.softDelete(id);\n\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TagsService } from './providers/tags.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Tag])],\n  controllers: [TagsController],\n  providers: [TagsService],\n  exports: [TagsService]\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    []\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Tag } from '../tag.entity';\nimport { In, Repository } from 'typeorm';\nimport { CreateTagDto } from '../dto/createTag.dto';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    @InjectRepository(Tag) private readonly tagRepository: Repository,\n  ) {}\n\n  public async create(createTagDto: CreateTagDto) {\n    const tag = this.tagRepository.create(createTagDto);\n    return this.tagRepository.save(tag);\n  }\n\n  public async findMultipleTags(tags: number[] = []) {    \n    const results = await this.tagRepository.find({\n      where: {\n        id: In(tags),\n      },\n    });    \n    return results;\n  }\n\n  public async delete(id: number) {\n    await this.tagRepository.delete(id);\n    return { deleted: true, id };\n  }\n\n  public async softDelete(id: number) {\n    await this.tagRepository.softDelete(id);\n    return { deleted: true, id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokensProvider.html":{"url":"injectables/TokensProvider.html","title":"injectable - TokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/tokens.provider.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/tokens.provider.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/tokens.provider.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/tokens.provider.ts:44\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { User } from 'src/users/user.entity';\nimport { IActiveUser } from '../interfaces/activeUser.interface';\nimport { RefreshTokenDto } from '../dto/refreshToken.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { throws } from 'assert';\nimport { error } from 'console';\n\n@Injectable()\nexport class TokensProvider {\n  constructor(\n    private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n      this.signToken>(\n        user.id,\n        this.jwtConfiguration.accessTokenTtl,\n        {\n          email: user.email,\n        },\n      ),\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl),\n    ]);\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  public async signToken(userId: number, expiresIn: number, payload?: T) {\n    return this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        secret: this.jwtConfiguration.secret,\n        expiresIn: expiresIn,\n      },\n    );\n  }\n\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    try {\n      const { sub } = await this.jwtService.verifyAsync\n      >(refreshTokenDto.refreshToken, {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n      });\n      const user = await this.usersService.findOneById(sub);\n      return this.generateTokens(user);\n    } catch (e) {\n      throw new UnauthorizedException(e);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/updatePost.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './createPost.dto';\n\nexport class UpdatePostDto extends PartialType(CreatePostDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostMetaOptionsDto.html":{"url":"classes/UpdatePostMetaOptionsDto.html","title":"class - UpdatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dto/updatePostMetaOptions.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostMetaOptionsDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsJSON, IsNotEmpty, IsString, MaxLength } from 'class-validator';\nimport { CreatePostMetaOptionsDto } from './createPostMetaOptions.dto';\n\nexport class UpdatePostMetaOptionsDto extends PartialType(CreatePostMetaOptionsDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/updateUser.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './createUser.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Upload.html":{"url":"entities/Upload.html","title":"entity - Upload","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/upload.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                mime\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                size\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        mime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 128, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: FileTypes, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { FileTypes } from './enums/fileTypes.enum';\n\n@Entity()\nexport class Upload {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  name: string;\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  path: string;\n  @Column({\n    type: 'enum',\n    enum: FileTypes,\n    default: FileTypes.IMAGE,\n    nullable: false,\n  })\n  type: string;\n  @Column({\n    type: 'varchar',\n    length: 128,\n    nullable: false,\n  })\n  mime: string;\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  size: number;\n  @CreateDateColumn()\n  createDate: Date;\n  @UpdateDateColumn()\n  updateDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadToAwsProvider.html":{"url":"injectables/UploadToAwsProvider.html","title":"injectable - UploadToAwsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadToAwsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/upload-to-aws.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                fileUpload\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configServise: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/upload-to-aws.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configServise\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        fileUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    fileUpload(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { S3 } from 'aws-sdk';\nimport * as path from 'path';\nimport { v4 as uuid4 } from 'uuid';\n\n@Injectable()\nexport class UploadToAwsProvider {\n  constructor(private readonly configServise: ConfigService) {}\n\n  public async fileUpload(file: Express.Multer.File) {    \n    const s3 = new S3();\n    try {\n      const uploadResult = await s3\n        .upload({\n          Bucket: this.configServise.get('appConfig.awsBucketName'),\n          Body: file.buffer,\n          Key: this.generateFileName(file),\n          ContentType: file.mimetype,\n        })\n        .promise();\n      return uploadResult.Key;\n    } catch (e) {\n      throw new RequestTimeoutException(e);\n    }\n  }\n\n  private generateFileName(file: Express.Multer.File) {\n    let fileName = file.originalname.split('.')[0];\n    fileName.replace(/\\s/g, '').trim();\n    let extension = path.extname(file.originalname);\n    let timestamp = new Date().getTime().toString().trim();\n    return `${fileName}-${timestamp}-${uuid4()}${extension}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadsController.html":{"url":"controllers/UploadsController.html","title":"controller - UploadsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/uploads.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                uploads\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@ApiHeaders(['undefined', 'undefined'])@ApiOperation({summary: 'Upload a new image to the server'})@Post('file')\n                \n            \n\n                    \n                        \n                            Defined in src/uploads/uploads.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiHeader, ApiHeaders, ApiOperation } from '@nestjs/swagger';\nimport { UploadsService } from './providers/uploads.service';\n\n@Controller('uploads')\nexport class UploadsController {\n  constructor(private readonly uploadsService: UploadsService) {}\n\n  @UseInterceptors(FileInterceptor('file'))\n  @ApiHeaders([\n    {\n      name: 'Content-Type',\n      description: 'multipart/form-data',\n    },\n    {\n      name: 'Authorization',\n      description: 'Bearer Token',\n    },\n  ])\n  @ApiOperation({\n    summary: 'Upload a new image to the server',\n  })\n  @Post('file')\n  public uploadFile(@UploadedFile() file: Express.Multer.File) {\n    return this.uploadsService.uploadFile(file);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadsModule.html":{"url":"modules/UploadsModule.html","title":"module - UploadsModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\n\n\nUploadsModule\n\nUploadsModule\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/uploads/uploads.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UploadToAwsProvider\n                        \n                        \n                            UploadsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UploadsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UploadsController } from './uploads.controller';\nimport { UploadsService } from './providers/uploads.service';\nimport { UploadToAwsProvider } from './providers/upload-to-aws.provider';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Upload } from './upload.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Upload])],\n  controllers: [UploadsController],\n  providers: [UploadsService, UploadToAwsProvider],\n})\nexport class UploadsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadsService.html":{"url":"injectables/UploadsService.html","title":"injectable - UploadsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/uploads.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadsRepository: Repository, uploadToAwsProvider: UploadToAwsProvider, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/uploads.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadToAwsProvider\n                                                  \n                                                        \n                                                                        UploadToAwsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/uploads.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n} from '@nestjs/common';\nimport { Upload } from '../upload.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { UploadToAwsProvider } from './upload-to-aws.provider';\nimport { ConfigService } from '@nestjs/config';\nimport { IUploadFile } from '../interfaces/uploadFile.interface';\nimport { FileTypes } from '../enums/fileTypes.enum';\n\n@Injectable()\nexport class UploadsService {\n  constructor(\n    @InjectRepository(Upload)\n    private readonly uploadsRepository: Repository,\n    private readonly uploadToAwsProvider: UploadToAwsProvider,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async uploadFile(file: Express.Multer.File) {\n    try {\n      if (\n        !['image/gif', 'image/jpeg', 'image/jpg', 'image/png'].includes(\n          file.mimetype,\n        )\n      ) {\n        throw new BadRequestException('Mime type is not supported');\n      }\n      const fileName = await this.uploadToAwsProvider.fileUpload(file);\n      const uploadFile: IUploadFile = {\n        name: fileName,\n        path: `${this.configService.get('appConfig.awsCloudfrontUrl')}/${fileName}`,\n        type: FileTypes.IMAGE,\n        mime: file.mimetype,\n        size: file.size,\n      };\n\n      const upload = this.uploadsRepository.create(uploadFile);\n      return this.uploadsRepository.save(upload);\n    } catch (e) {\n      throw new ConflictException(e);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Post } from 'src/posts/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  @Exclude()\n  password?: string;\n  \n  @Column({\n    type: 'varchar',\n    nullable: true\n  })\n  @Exclude()\n  googleId?: string;\n  \n  @OneToMany(()=>Post, (post)=> post.author)\n  posts: Post[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                createManyUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(users: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create-many')@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                users\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Auth(AuthType.None)@UseInterceptors(ClassSerializerInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParams: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParams\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(user: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  DefaultValuePipe,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/createUser.dto';\nimport { GetUsersParamDto } from './dto/getUsersParam.dto';\nimport { UpdateUserDto } from './dto/updateUser.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dto/createManyUsers.dto';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/authType.enum';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of users on the application' \n  })\n  @ApiResponse({\n    status:200,\n    description: \"Users fetched successfully based on the query\"\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'The page number that you want the API to return',\n    example: 1\n  })\n  public async getUsers(\n    @Param() getUserParams: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParams, limit, page);\n  }\n\n  @Post()\n  @Auth(AuthType.None)\n  @UseInterceptors(ClassSerializerInterceptor)\n  public async createUser(@Body() user: CreateUserDto) {\n    return this.usersService.create(user);\n  }\n\n  @Post('/create-many')\n  @Auth(AuthType.None)\n  public async createManyUsers(@Body() users: CreateManyUsersDto) {\n    return this.usersService.createMany(users);\n  }\n\n  @Patch()\n  public async updateUser(@Body() user: UpdateUserDto) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersCreateManyProvider.html":{"url":"injectables/UsersCreateManyProvider.html","title":"injectable - UsersCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users-create-many.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users-create-many.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users-create-many.provider.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n} from '@nestjs/common';\nimport { DataSource } from 'typeorm';\nimport { User } from '../user.entity';\nimport { CreateManyUsersDto } from '../dto/createManyUsers.dto';\nimport { handleDbError } from 'src/common/utils/exception.util';\n\n@Injectable()\nexport class UsersCreateManyProvider {\n  constructor(private readonly dataSource: DataSource) {}\n\n  public async createMany(createUsersDto: CreateManyUsersDto) {\n    const newUsers: User[] = [];\n    const queryRunner = this.dataSource.createQueryRunner();\n    await handleDbError(\n      async () => {\n        queryRunner.connect();\n        queryRunner.startTransaction();\n      },\n      { message: 'Could not connect to the database' },\n    );\n    try {\n      for (let user of createUsersDto.users) {\n        const newUser = queryRunner.manager.create(User, user);\n        const result = await queryRunner.manager.save(newUser);\n        newUsers.push(result);\n      }\n      await queryRunner.commitTransaction();\n    } catch (e) {\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(e),\n      });\n    } finally {\n      await handleDbError(\n        async () => {\n          queryRunner.release();\n        },\n        { message: 'Could not release the connection' },\n      );\n    }\n    return newUsers;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            UsersCreateManyProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { UsersCreateManyProvider } from './providers/users-create-many.provider';\nimport { CreateUserProvider } from './providers/create-user.provider';\n\n\n@Module({\n  controllers: [UsersController],\n  providers: [\n    UsersService,\n    UsersCreateManyProvider,\n    CreateUserProvider,\n  ],\n  exports: [UsersService],\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform business opearations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, usersCreateManyProvider: UsersCreateManyProvider, createUserProvider: CreateUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:25\n                            \n                        \n\n                \n                    \n                            Injecting Auth service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateManyProvider\n                                                  \n                                                        \n                                                                        UsersCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: IGoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            IGoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Method to get all users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Method to get specifec user by id from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from '../dto/getUsersParam.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { CreateUserDto } from '../dto/createUser.dto';\nimport { UsersCreateManyProvider } from './users-create-many.provider';\nimport { CreateManyUsersDto } from '../dto/createManyUsers.dto';\nimport { handleDbError } from 'src/common/utils/exception.util';\nimport { CreateUserProvider } from './create-user.provider';\nimport { IGoogleUser } from '../interfaces/googleUser.interface';\n\n/**\n * Class to connect to Users table and perform business opearations\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Injecting Auth service\n   */\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private readonly usersCreateManyProvider: UsersCreateManyProvider,\n    private readonly createUserProvider: CreateUserProvider,\n  ) {}\n  /**\n   * Method to get all users from the database\n   */\n  public async findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    throw new HttpException(\n      {\n        status: HttpStatus.MOVED_PERMANENTLY,\n        error: 'The API endopint does not exist',\n        fileName: 'users.service.ts',\n        lineNumber: 88,\n      },\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        cause: new Error(),\n        description: 'Occured because abrikos',\n      },\n    );\n  }\n  /**\n   * Method to get specifec user by id from the database\n   */\n  public async findOneById(id: number) {\n    let user = undefined;\n    user = await handleDbError(() =>\n      this.usersRepository.findOneByOrFail({ id }),\n    );\n    return user;\n  }\n\n  public async findOneByEmail(email: string) {\n    const user = await handleDbError(\n      () => this.usersRepository.findOneBy({ email }),\n      { description: 'Could not fetch the user' },\n    );\n    if (!user) {\n      throw new UnauthorizedException('User does not exist');\n    }\n    return user;\n  }\n\n  public async findOneByGoogleId(googleId: string) {\n    return this.usersRepository.findOneBy({ googleId });\n  }\n\n  public async create(createUserDto: CreateUserDto) {\n    return this.createUserProvider.create(createUserDto);\n  }\n\n  public async createGoogleUser(googleUser: IGoogleUser) {\n    return this.createUserProvider.createGoogleUser(googleUser);\n  }\n\n  public async createMany(createUsersDto: CreateManyUsersDto) {\n    return this.usersCreateManyProvider.createMany(createUsersDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.create.ts\n            \n            function\n            appCreate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constants.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/activeUser.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/refreshToken.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/interfaces/activeUser.interface.ts\n            \n            interface\n            IActiveUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/tokens.provider.ts\n            \n            injectable\n            TokensProvider\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/social/dto/googleToken.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/dto/paginationQuery.dto.ts\n            \n            class\n            PaginatioQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/utils/exception.util.ts\n            \n            interface\n            HandleDbErrorOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/utils/exception.util.ts\n            \n            function\n            handleDbError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mail/providers/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dto/createPostMetaOptions.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/dto/updatePostMetaOptions.dto.ts\n            \n            class\n            UpdatePostMetaOptionsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/metaOption.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/metaOptions.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/metaOptions.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/migrations/1731061477784-firstMigration.ts\n            \n            class\n            FirstMigration1731061477784\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/dto/createPost.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dto/getPosts.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/getPosts.dto.ts\n            \n            class\n            GetPostsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/updatePost.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dto/createTag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/uploads/interfaces/uploadFile.interface.ts\n            \n            interface\n            IUploadFile\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/uploads/providers/upload-to-aws.provider.ts\n            \n            injectable\n            UploadToAwsProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/uploads/providers/uploads.service.ts\n            \n            injectable\n            UploadsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/uploads/upload.entity.ts\n            \n            entity\n            Upload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/uploads/uploads.controller.ts\n            \n            controller\n            UploadsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/createManyUsers.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/createUser.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/getUsersParam.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/updateUser.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/googleUser.interface.ts\n            \n            interface\n            IGoogleUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/providers/users-create-many.provider.ts\n            \n            injectable\n            UsersCreateManyProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                44 %\n                (4/9)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        test/helpers/bootstrap-nest-app.helper.ts\n            \n            function\n            bootstrapNestApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        test/helpers/drop-database.helper.ts\n            \n            function\n            dropDatabase\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        test/users/users.post.e2e-spec.sample-data.ts\n            \n            variable\n            sampleCompleteUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        test/users/users.post.e2e-spec.sample-data.ts\n            \n            variable\n            sampleMissingEmailUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        test/users/users.post.e2e-spec.sample-data.ts\n            \n            variable\n            sampleMissingFirstNameUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        test/users/users.post.e2e-spec.sample-data.ts\n            \n            variable\n            sampleMissingPasswordUser\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.0.1\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            aws-sdk : ^2.1691.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cross-env : ^7.0.3\n        \n            ejs : ^3.1.10\n        \n            google-auth-library : ^9.14.2\n        \n            joi : ^17.13.3\n        \n            nodemailer : ^6.9.16\n        \n            pg : ^8.13.1\n        \n            pm2 : ^5.4.2\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^11.0.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../authType.enum.ts)\n                        \n                        \n                            FileTypes   (src/.../fileTypes.enum.ts)\n                        \n                        \n                            PostStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/authType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                Value : Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : None\n                            \n                        \n            \n        \n\n    src/uploads/enums/fileTypes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        FileTypes\n                    \n                \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : image\n                            \n                        \n            \n        \n\n    src/posts/enum/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enum/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appCreate   (src/.../app.create.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            bootstrapNestApp   (test/.../bootstrap-nest-app.helper.ts)\n                        \n                        \n                            dropDatabase   (test/.../drop-database.helper.ts)\n                        \n                        \n                            handleDbError   (src/.../exception.util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.create.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appCreate\n                        \n                    \n                \n            \n            \n                \nappCreate(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    test/helpers/bootstrap-nest-app.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrapNestApp\n                        \n                    \n                \n            \n            \n                \nbootstrapNestApp()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    test/helpers/drop-database.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dropDatabase\n                        \n                    \n                \n            \n            \n                \ndropDatabase(config: ConfigService)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/common/utils/exception.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleDbError\n                        \n                    \n                \n            \n            \n                \nhandleDbError(fn, options: HandleDbErrorOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            HandleDbErrorOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBlog API\nThis is a blog backend API where users can authenticate, create posts with different meta options, create tags and add them to posts. Also it is possible to upload image files to the server (images will be saved to S3 bucket on Amazon). The project is built using NestJS, PostgeSQL, TypeORM. Alternatively there is a simplified version which uses MongoDB and Mongoose (available on separate branch). Authorization and authentication is implemented with JWT. It is also possible to authenticate using Google.\nFeatures\n\nPosts Management: Authorized users can create, update and delete posts. Also it is possible to fetch paginated posts in some dates range.\nUsers Authentication: After signing in user receives access and refresh tokens.\nUser Account Management: It is possible to create and update single user account and also create multiple users with one request.\nMeta Options: Meta options is a special property which can be attached to the post. Meta options can be separately created.\nTags: Tags are also one of posts properties and should be created before adding to post.\nUpload images: There is a possibility to upload image files to the server. As a response user receives a cloudfront url attached to the apploaded image.\n\nTechnologies\nDevelopment\n\nNestJS: A progressive Node.js framework for building efficient and scalable server-side applications.\nPostgreSQL: An open-source relational database known for its robustness, extensibility, and compliance with SQL standards.\nTypeORM: An Object-Relational Mapping (ORM) library for TypeScript and JavaScript, supporting multiple databases.\nDocker: A platform for developing, shipping, and running applications in isolated containers. Used for running database on local machine.\nGoogle Auth: An authentication service by Google that allows secure user login with Google accounts.\n\nFiles storage\n\nAWS S3: A scalable storage service by Amazon Web Services for storing and retrieving any amount of data. Used for storing files.\nAWS CloudFront: A content delivery network (CDN) by AWS that distributes content globally with low latency.\n\nAlternative database\n\nMongoDB: A NoSQL database known for its flexibility and scalability, storing data in JSON-like documents.\nMongoose: An Object Data Modeling (ODM) library for MongoDB and Node.js, providing schema-based data validation.\n\nDeployment\n\nPM2: A process manager for Node.js applications that simplifies deployment and management. Used for running deployed application on Amazon.\nAWS EC2: A service by Amazon Web Services providing resizable compute capacity in the cloud.\n\nTesting and documentation\n\nJest: A JavaScript testing framework for unit and integration testing with a focus on simplicity.\nSwagger: A toolset for designing, building, documenting, and consuming RESTful APIs.\nCompodoc: A documentation tool that generates static documentation from code.\n\nHow to run the project localy\n1. Clone the Repository\nExample :git clone https://github.com/olha-dev-fullstack/nest-blog-api.git\ncd nest-blog-api2. Install Dependencies\nExample :npm install3. Create .env files:\n\n.env.development for developmet mode with next structure:\n\nExample :DB_HOST=localhost\nDB_PORT=5432\nDB_USER=\nDB_PASSWORD=\nDB_NAME=\nDB_SYNC=false\nDB_AUTOLOAD=true\n\nAPI_VERSION=\nPROFILE_API_KEY=\n\nJWT_SECRET=\nJWT_TOKEN_AUDIENCE=localhost:3000\nJWT_TOKEN_ISSUER=localhost:3000\nJWT_ACCESS_TOKEN_TTL=3600\nJWT_REFRESH_TOKEN_TTL=86400\n\nGOOGLE_CLIENT_ID=\nGOOGLE_CLIENT_SECRET=\n\nAWS_PUBLIC_BUCKET_NAME=\nAWS_REGION=\nAWS_CLOUDFRONT_URL=\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\n\nMAIL_HOST=\nSMTP_USERNAME=\nSMTP_PASSWORD=\n\nMONGO_DB_USERNAME=\nMONGO_DB_PASSWORD=\nMONGO_DB_NAME=\nMONGO_DB_CONNECTION_STRING=\n.env.test should be similatr to env.development to execute tests:\n\nin production .env file will be used so it can be generated similarly to development one.\n\n\n3. Database Setup\nCreate typeorm-cli.config.ts file (you can use ``typeorm-cli.sample.config.ts` as an example) and set valid database_name\nRun migrations to create local database:\nExample :npm run migration:run5. Start the Server\nRun the NestJS server:\n\nwatch mode\n\nExample :npm run start:dev\ndev mode\n\nExample :npm run start\nproduction mode\n\nExample :npm run start:prodThe API will be available at http://localhost:3000.\nAPI Endpoints\nRunning Tests\nTo run unit tests, use:\nExample :npm run testTo run End-to-End tests, use:\nExample :npm run test:e2eGenerate documentation\nExample :npm run docIt would be accessible on the port 3001.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nMetaOptionsModule->PostsModule\n\n\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nTokensProvider\n\nTokensProvider\n\nAuthModule -->\n\nTokensProvider->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    17 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    16 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../activeUser.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            sampleCompleteUser   (test/.../users.post.e2e-spec.sample-data.ts)\n                        \n                        \n                            sampleMissingEmailUser   (test/.../users.post.e2e-spec.sample-data.ts)\n                        \n                        \n                            sampleMissingFirstNameUser   (test/.../users.post.e2e-spec.sample-data.ts)\n                        \n                        \n                            sampleMissingPasswordUser   (test/.../users.post.e2e-spec.sample-data.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/activeUser.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof IActiveUser | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: IActiveUser = request[REQUEST_USER_KEY];\n    return field ? user?.[field] : user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) =>\n  SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    test/users/users.post.e2e-spec.sample-data.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sampleCompleteUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    firstName: faker.person.firstName(),\n    lastName: faker.person.lastName(),\n    email: faker.internet.email(),\n    password: \"Password123#\"\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sampleMissingEmailUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    firstName: faker.person.firstName(),\n    lastName: faker.person.lastName(),\n    password: \"Password123#\"\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sampleMissingFirstNameUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    lastName: faker.person.lastName(),\n    email: faker.internet.email(),\n    password: \"Password123#\"\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sampleMissingPasswordUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    firstName: faker.person.firstName(),\n    lastName: faker.person.lastName(),\n    email: faker.internet.email(),\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
